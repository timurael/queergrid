// Database schema for GDPR-compliant email collection
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "sqlite" for development
  url      = env("DATABASE_URL")
}

model EmailSubscriber {
  id        String @id @default(cuid())
  email     String @unique
  emailHash String @unique // Hashed version for deduplication

  // GDPR Compliance Fields
  consentGiven     Boolean   @default(false)
  consentTimestamp DateTime?
  consentIpAddress String?
  consentUserAgent String?
  consentVersion   String    @default("1.0") // Track consent version changes

  // Email Verification
  isVerified         Boolean   @default(false)
  verificationToken  String?   @unique
  verificationSentAt DateTime?
  verifiedAt         DateTime?

  // Subscription Management
  isActive         Boolean   @default(true)
  unsubscribeToken String    @unique @default(cuid())
  unsubscribedAt   DateTime?

  // Metadata
  source      String? // Which form/page they signed up from
  utmSource   String?
  utmMedium   String?
  utmCampaign String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  auditLogs    AuditLog[]
  dataRequests DataRequest[]

  @@map("email_subscribers")
}

model AuditLog {
  id           String           @id @default(cuid())
  subscriberId String?
  subscriber   EmailSubscriber? @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  // Action tracking
  action      String // CREATE, UPDATE, DELETE, EXPORT, CONSENT_WITHDRAWN, etc.
  description String

  // Request metadata
  ipAddress String?
  userAgent String?
  requestId String?

  // Legal compliance
  legalBasis String? // consent, legitimate_interest, etc.

  // Data
  oldData Json?
  newData Json?

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model DataRequest {
  id           String           @id @default(cuid())
  subscriberId String?
  subscriber   EmailSubscriber? @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  // Request details
  type         DataRequestType
  status       DataRequestStatus @default(PENDING)
  requestEmail String // Email address making the request

  // Processing
  processedAt DateTime?
  processedBy String? // Admin user who processed

  // Security
  verificationToken  String    @unique @default(cuid())
  verificationSentAt DateTime?
  verifiedAt         DateTime?

  // Data export (for EXPORT requests)
  exportData      Json?
  exportUrl       String? // Secure download link
  exportExpiresAt DateTime?

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("data_requests")
}

model ConsentRecord {
  id    String @id @default(cuid())
  email String

  // Consent details
  consentType    String // email_marketing, newsletter, etc.
  consentGiven   Boolean
  consentVersion String

  // Legal compliance
  legalBasis String // consent, legitimate_interest, etc.
  purpose    String // Purpose of data processing

  // Request metadata
  ipAddress String?
  userAgent String?
  source    String? // Form source

  // Timestamps
  timestamp DateTime  @default(now())
  expiresAt DateTime? // Some consents may expire

  @@map("consent_records")
}

model AdminUser {
  id           String @id @default(cuid())
  email        String @unique
  passwordHash String

  // Permissions
  role     AdminRole @default(VIEWER)
  isActive Boolean   @default(true)

  // Security
  lastLoginAt         DateTime?
  lastLoginIp         String?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?

  // 2FA
  twoFactorSecret  String?
  twoFactorEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

enum DataRequestType {
  EXPORT // GDPR Article 15 - Right of access
  DELETE // GDPR Article 17 - Right to erasure
  RECTIFY // GDPR Article 16 - Right to rectification
  RESTRICT // GDPR Article 18 - Right to restriction
  PORTABILITY // GDPR Article 20 - Right to data portability
}

enum DataRequestStatus {
  PENDING
  VERIFIED
  PROCESSING
  COMPLETED
  REJECTED
  EXPIRED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
}
