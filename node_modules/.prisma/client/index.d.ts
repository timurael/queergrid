
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model EmailSubscriber
 * 
 */
export type EmailSubscriber = $Result.DefaultSelection<Prisma.$EmailSubscriberPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model DataRequest
 * 
 */
export type DataRequest = $Result.DefaultSelection<Prisma.$DataRequestPayload>
/**
 * Model ConsentRecord
 * 
 */
export type ConsentRecord = $Result.DefaultSelection<Prisma.$ConsentRecordPayload>
/**
 * Model AdminUser
 * 
 */
export type AdminUser = $Result.DefaultSelection<Prisma.$AdminUserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const DataRequestType: {
  EXPORT: 'EXPORT',
  DELETE: 'DELETE',
  RECTIFY: 'RECTIFY',
  RESTRICT: 'RESTRICT',
  PORTABILITY: 'PORTABILITY'
};

export type DataRequestType = (typeof DataRequestType)[keyof typeof DataRequestType]


export const DataRequestStatus: {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type DataRequestStatus = (typeof DataRequestStatus)[keyof typeof DataRequestStatus]


export const AdminRole: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  EDITOR: 'EDITOR',
  VIEWER: 'VIEWER'
};

export type AdminRole = (typeof AdminRole)[keyof typeof AdminRole]

}

export type DataRequestType = $Enums.DataRequestType

export const DataRequestType: typeof $Enums.DataRequestType

export type DataRequestStatus = $Enums.DataRequestStatus

export const DataRequestStatus: typeof $Enums.DataRequestStatus

export type AdminRole = $Enums.AdminRole

export const AdminRole: typeof $Enums.AdminRole

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more EmailSubscribers
 * const emailSubscribers = await prisma.emailSubscriber.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more EmailSubscribers
   * const emailSubscribers = await prisma.emailSubscriber.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.emailSubscriber`: Exposes CRUD operations for the **EmailSubscriber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailSubscribers
    * const emailSubscribers = await prisma.emailSubscriber.findMany()
    * ```
    */
  get emailSubscriber(): Prisma.EmailSubscriberDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.dataRequest`: Exposes CRUD operations for the **DataRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataRequests
    * const dataRequests = await prisma.dataRequest.findMany()
    * ```
    */
  get dataRequest(): Prisma.DataRequestDelegate<ExtArgs>;

  /**
   * `prisma.consentRecord`: Exposes CRUD operations for the **ConsentRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsentRecords
    * const consentRecords = await prisma.consentRecord.findMany()
    * ```
    */
  get consentRecord(): Prisma.ConsentRecordDelegate<ExtArgs>;

  /**
   * `prisma.adminUser`: Exposes CRUD operations for the **AdminUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminUsers
    * const adminUsers = await prisma.adminUser.findMany()
    * ```
    */
  get adminUser(): Prisma.AdminUserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    EmailSubscriber: 'EmailSubscriber',
    AuditLog: 'AuditLog',
    DataRequest: 'DataRequest',
    ConsentRecord: 'ConsentRecord',
    AdminUser: 'AdminUser'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "emailSubscriber" | "auditLog" | "dataRequest" | "consentRecord" | "adminUser"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      EmailSubscriber: {
        payload: Prisma.$EmailSubscriberPayload<ExtArgs>
        fields: Prisma.EmailSubscriberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailSubscriberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailSubscriberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>
          }
          findFirst: {
            args: Prisma.EmailSubscriberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailSubscriberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>
          }
          findMany: {
            args: Prisma.EmailSubscriberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>[]
          }
          create: {
            args: Prisma.EmailSubscriberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>
          }
          createMany: {
            args: Prisma.EmailSubscriberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailSubscriberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>[]
          }
          delete: {
            args: Prisma.EmailSubscriberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>
          }
          update: {
            args: Prisma.EmailSubscriberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>
          }
          deleteMany: {
            args: Prisma.EmailSubscriberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailSubscriberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmailSubscriberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSubscriberPayload>
          }
          aggregate: {
            args: Prisma.EmailSubscriberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailSubscriber>
          }
          groupBy: {
            args: Prisma.EmailSubscriberGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailSubscriberGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailSubscriberCountArgs<ExtArgs>
            result: $Utils.Optional<EmailSubscriberCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      DataRequest: {
        payload: Prisma.$DataRequestPayload<ExtArgs>
        fields: Prisma.DataRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          findFirst: {
            args: Prisma.DataRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          findMany: {
            args: Prisma.DataRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>[]
          }
          create: {
            args: Prisma.DataRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          createMany: {
            args: Prisma.DataRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DataRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>[]
          }
          delete: {
            args: Prisma.DataRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          update: {
            args: Prisma.DataRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          deleteMany: {
            args: Prisma.DataRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DataRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          aggregate: {
            args: Prisma.DataRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataRequest>
          }
          groupBy: {
            args: Prisma.DataRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DataRequestCountAggregateOutputType> | number
          }
        }
      }
      ConsentRecord: {
        payload: Prisma.$ConsentRecordPayload<ExtArgs>
        fields: Prisma.ConsentRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsentRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsentRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          findFirst: {
            args: Prisma.ConsentRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsentRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          findMany: {
            args: Prisma.ConsentRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>[]
          }
          create: {
            args: Prisma.ConsentRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          createMany: {
            args: Prisma.ConsentRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsentRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>[]
          }
          delete: {
            args: Prisma.ConsentRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          update: {
            args: Prisma.ConsentRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          deleteMany: {
            args: Prisma.ConsentRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsentRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsentRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          aggregate: {
            args: Prisma.ConsentRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsentRecord>
          }
          groupBy: {
            args: Prisma.ConsentRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsentRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsentRecordCountArgs<ExtArgs>
            result: $Utils.Optional<ConsentRecordCountAggregateOutputType> | number
          }
        }
      }
      AdminUser: {
        payload: Prisma.$AdminUserPayload<ExtArgs>
        fields: Prisma.AdminUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findFirst: {
            args: Prisma.AdminUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findMany: {
            args: Prisma.AdminUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          create: {
            args: Prisma.AdminUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          createMany: {
            args: Prisma.AdminUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          delete: {
            args: Prisma.AdminUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          update: {
            args: Prisma.AdminUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          deleteMany: {
            args: Prisma.AdminUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          aggregate: {
            args: Prisma.AdminUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminUser>
          }
          groupBy: {
            args: Prisma.AdminUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminUserCountArgs<ExtArgs>
            result: $Utils.Optional<AdminUserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmailSubscriberCountOutputType
   */

  export type EmailSubscriberCountOutputType = {
    auditLogs: number
    dataRequests: number
  }

  export type EmailSubscriberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | EmailSubscriberCountOutputTypeCountAuditLogsArgs
    dataRequests?: boolean | EmailSubscriberCountOutputTypeCountDataRequestsArgs
  }

  // Custom InputTypes
  /**
   * EmailSubscriberCountOutputType without action
   */
  export type EmailSubscriberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriberCountOutputType
     */
    select?: EmailSubscriberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailSubscriberCountOutputType without action
   */
  export type EmailSubscriberCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * EmailSubscriberCountOutputType without action
   */
  export type EmailSubscriberCountOutputTypeCountDataRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataRequestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model EmailSubscriber
   */

  export type AggregateEmailSubscriber = {
    _count: EmailSubscriberCountAggregateOutputType | null
    _min: EmailSubscriberMinAggregateOutputType | null
    _max: EmailSubscriberMaxAggregateOutputType | null
  }

  export type EmailSubscriberMinAggregateOutputType = {
    id: string | null
    email: string | null
    emailHash: string | null
    consentGiven: boolean | null
    consentTimestamp: Date | null
    consentIpAddress: string | null
    consentUserAgent: string | null
    consentVersion: string | null
    isVerified: boolean | null
    verificationToken: string | null
    verificationSentAt: Date | null
    verifiedAt: Date | null
    isActive: boolean | null
    unsubscribeToken: string | null
    unsubscribedAt: Date | null
    source: string | null
    utmSource: string | null
    utmMedium: string | null
    utmCampaign: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailSubscriberMaxAggregateOutputType = {
    id: string | null
    email: string | null
    emailHash: string | null
    consentGiven: boolean | null
    consentTimestamp: Date | null
    consentIpAddress: string | null
    consentUserAgent: string | null
    consentVersion: string | null
    isVerified: boolean | null
    verificationToken: string | null
    verificationSentAt: Date | null
    verifiedAt: Date | null
    isActive: boolean | null
    unsubscribeToken: string | null
    unsubscribedAt: Date | null
    source: string | null
    utmSource: string | null
    utmMedium: string | null
    utmCampaign: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailSubscriberCountAggregateOutputType = {
    id: number
    email: number
    emailHash: number
    consentGiven: number
    consentTimestamp: number
    consentIpAddress: number
    consentUserAgent: number
    consentVersion: number
    isVerified: number
    verificationToken: number
    verificationSentAt: number
    verifiedAt: number
    isActive: number
    unsubscribeToken: number
    unsubscribedAt: number
    source: number
    utmSource: number
    utmMedium: number
    utmCampaign: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailSubscriberMinAggregateInputType = {
    id?: true
    email?: true
    emailHash?: true
    consentGiven?: true
    consentTimestamp?: true
    consentIpAddress?: true
    consentUserAgent?: true
    consentVersion?: true
    isVerified?: true
    verificationToken?: true
    verificationSentAt?: true
    verifiedAt?: true
    isActive?: true
    unsubscribeToken?: true
    unsubscribedAt?: true
    source?: true
    utmSource?: true
    utmMedium?: true
    utmCampaign?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailSubscriberMaxAggregateInputType = {
    id?: true
    email?: true
    emailHash?: true
    consentGiven?: true
    consentTimestamp?: true
    consentIpAddress?: true
    consentUserAgent?: true
    consentVersion?: true
    isVerified?: true
    verificationToken?: true
    verificationSentAt?: true
    verifiedAt?: true
    isActive?: true
    unsubscribeToken?: true
    unsubscribedAt?: true
    source?: true
    utmSource?: true
    utmMedium?: true
    utmCampaign?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailSubscriberCountAggregateInputType = {
    id?: true
    email?: true
    emailHash?: true
    consentGiven?: true
    consentTimestamp?: true
    consentIpAddress?: true
    consentUserAgent?: true
    consentVersion?: true
    isVerified?: true
    verificationToken?: true
    verificationSentAt?: true
    verifiedAt?: true
    isActive?: true
    unsubscribeToken?: true
    unsubscribedAt?: true
    source?: true
    utmSource?: true
    utmMedium?: true
    utmCampaign?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailSubscriberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSubscriber to aggregate.
     */
    where?: EmailSubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSubscribers to fetch.
     */
    orderBy?: EmailSubscriberOrderByWithRelationInput | EmailSubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailSubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSubscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSubscribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailSubscribers
    **/
    _count?: true | EmailSubscriberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailSubscriberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailSubscriberMaxAggregateInputType
  }

  export type GetEmailSubscriberAggregateType<T extends EmailSubscriberAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailSubscriber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailSubscriber[P]>
      : GetScalarType<T[P], AggregateEmailSubscriber[P]>
  }




  export type EmailSubscriberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailSubscriberWhereInput
    orderBy?: EmailSubscriberOrderByWithAggregationInput | EmailSubscriberOrderByWithAggregationInput[]
    by: EmailSubscriberScalarFieldEnum[] | EmailSubscriberScalarFieldEnum
    having?: EmailSubscriberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailSubscriberCountAggregateInputType | true
    _min?: EmailSubscriberMinAggregateInputType
    _max?: EmailSubscriberMaxAggregateInputType
  }

  export type EmailSubscriberGroupByOutputType = {
    id: string
    email: string
    emailHash: string
    consentGiven: boolean
    consentTimestamp: Date | null
    consentIpAddress: string | null
    consentUserAgent: string | null
    consentVersion: string
    isVerified: boolean
    verificationToken: string | null
    verificationSentAt: Date | null
    verifiedAt: Date | null
    isActive: boolean
    unsubscribeToken: string
    unsubscribedAt: Date | null
    source: string | null
    utmSource: string | null
    utmMedium: string | null
    utmCampaign: string | null
    createdAt: Date
    updatedAt: Date
    _count: EmailSubscriberCountAggregateOutputType | null
    _min: EmailSubscriberMinAggregateOutputType | null
    _max: EmailSubscriberMaxAggregateOutputType | null
  }

  type GetEmailSubscriberGroupByPayload<T extends EmailSubscriberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailSubscriberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailSubscriberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailSubscriberGroupByOutputType[P]>
            : GetScalarType<T[P], EmailSubscriberGroupByOutputType[P]>
        }
      >
    >


  export type EmailSubscriberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    emailHash?: boolean
    consentGiven?: boolean
    consentTimestamp?: boolean
    consentIpAddress?: boolean
    consentUserAgent?: boolean
    consentVersion?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationSentAt?: boolean
    verifiedAt?: boolean
    isActive?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    source?: boolean
    utmSource?: boolean
    utmMedium?: boolean
    utmCampaign?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    auditLogs?: boolean | EmailSubscriber$auditLogsArgs<ExtArgs>
    dataRequests?: boolean | EmailSubscriber$dataRequestsArgs<ExtArgs>
    _count?: boolean | EmailSubscriberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSubscriber"]>

  export type EmailSubscriberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    emailHash?: boolean
    consentGiven?: boolean
    consentTimestamp?: boolean
    consentIpAddress?: boolean
    consentUserAgent?: boolean
    consentVersion?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationSentAt?: boolean
    verifiedAt?: boolean
    isActive?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    source?: boolean
    utmSource?: boolean
    utmMedium?: boolean
    utmCampaign?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailSubscriber"]>

  export type EmailSubscriberSelectScalar = {
    id?: boolean
    email?: boolean
    emailHash?: boolean
    consentGiven?: boolean
    consentTimestamp?: boolean
    consentIpAddress?: boolean
    consentUserAgent?: boolean
    consentVersion?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verificationSentAt?: boolean
    verifiedAt?: boolean
    isActive?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    source?: boolean
    utmSource?: boolean
    utmMedium?: boolean
    utmCampaign?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailSubscriberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | EmailSubscriber$auditLogsArgs<ExtArgs>
    dataRequests?: boolean | EmailSubscriber$dataRequestsArgs<ExtArgs>
    _count?: boolean | EmailSubscriberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailSubscriberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmailSubscriberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailSubscriber"
    objects: {
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      dataRequests: Prisma.$DataRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      emailHash: string
      consentGiven: boolean
      consentTimestamp: Date | null
      consentIpAddress: string | null
      consentUserAgent: string | null
      consentVersion: string
      isVerified: boolean
      verificationToken: string | null
      verificationSentAt: Date | null
      verifiedAt: Date | null
      isActive: boolean
      unsubscribeToken: string
      unsubscribedAt: Date | null
      source: string | null
      utmSource: string | null
      utmMedium: string | null
      utmCampaign: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailSubscriber"]>
    composites: {}
  }

  type EmailSubscriberGetPayload<S extends boolean | null | undefined | EmailSubscriberDefaultArgs> = $Result.GetResult<Prisma.$EmailSubscriberPayload, S>

  type EmailSubscriberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmailSubscriberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmailSubscriberCountAggregateInputType | true
    }

  export interface EmailSubscriberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailSubscriber'], meta: { name: 'EmailSubscriber' } }
    /**
     * Find zero or one EmailSubscriber that matches the filter.
     * @param {EmailSubscriberFindUniqueArgs} args - Arguments to find a EmailSubscriber
     * @example
     * // Get one EmailSubscriber
     * const emailSubscriber = await prisma.emailSubscriber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailSubscriberFindUniqueArgs>(args: SelectSubset<T, EmailSubscriberFindUniqueArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmailSubscriber that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmailSubscriberFindUniqueOrThrowArgs} args - Arguments to find a EmailSubscriber
     * @example
     * // Get one EmailSubscriber
     * const emailSubscriber = await prisma.emailSubscriber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailSubscriberFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailSubscriberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmailSubscriber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberFindFirstArgs} args - Arguments to find a EmailSubscriber
     * @example
     * // Get one EmailSubscriber
     * const emailSubscriber = await prisma.emailSubscriber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailSubscriberFindFirstArgs>(args?: SelectSubset<T, EmailSubscriberFindFirstArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmailSubscriber that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberFindFirstOrThrowArgs} args - Arguments to find a EmailSubscriber
     * @example
     * // Get one EmailSubscriber
     * const emailSubscriber = await prisma.emailSubscriber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailSubscriberFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailSubscriberFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmailSubscribers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailSubscribers
     * const emailSubscribers = await prisma.emailSubscriber.findMany()
     * 
     * // Get first 10 EmailSubscribers
     * const emailSubscribers = await prisma.emailSubscriber.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailSubscriberWithIdOnly = await prisma.emailSubscriber.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailSubscriberFindManyArgs>(args?: SelectSubset<T, EmailSubscriberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmailSubscriber.
     * @param {EmailSubscriberCreateArgs} args - Arguments to create a EmailSubscriber.
     * @example
     * // Create one EmailSubscriber
     * const EmailSubscriber = await prisma.emailSubscriber.create({
     *   data: {
     *     // ... data to create a EmailSubscriber
     *   }
     * })
     * 
     */
    create<T extends EmailSubscriberCreateArgs>(args: SelectSubset<T, EmailSubscriberCreateArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmailSubscribers.
     * @param {EmailSubscriberCreateManyArgs} args - Arguments to create many EmailSubscribers.
     * @example
     * // Create many EmailSubscribers
     * const emailSubscriber = await prisma.emailSubscriber.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailSubscriberCreateManyArgs>(args?: SelectSubset<T, EmailSubscriberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailSubscribers and returns the data saved in the database.
     * @param {EmailSubscriberCreateManyAndReturnArgs} args - Arguments to create many EmailSubscribers.
     * @example
     * // Create many EmailSubscribers
     * const emailSubscriber = await prisma.emailSubscriber.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailSubscribers and only return the `id`
     * const emailSubscriberWithIdOnly = await prisma.emailSubscriber.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailSubscriberCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailSubscriberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmailSubscriber.
     * @param {EmailSubscriberDeleteArgs} args - Arguments to delete one EmailSubscriber.
     * @example
     * // Delete one EmailSubscriber
     * const EmailSubscriber = await prisma.emailSubscriber.delete({
     *   where: {
     *     // ... filter to delete one EmailSubscriber
     *   }
     * })
     * 
     */
    delete<T extends EmailSubscriberDeleteArgs>(args: SelectSubset<T, EmailSubscriberDeleteArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmailSubscriber.
     * @param {EmailSubscriberUpdateArgs} args - Arguments to update one EmailSubscriber.
     * @example
     * // Update one EmailSubscriber
     * const emailSubscriber = await prisma.emailSubscriber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailSubscriberUpdateArgs>(args: SelectSubset<T, EmailSubscriberUpdateArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmailSubscribers.
     * @param {EmailSubscriberDeleteManyArgs} args - Arguments to filter EmailSubscribers to delete.
     * @example
     * // Delete a few EmailSubscribers
     * const { count } = await prisma.emailSubscriber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailSubscriberDeleteManyArgs>(args?: SelectSubset<T, EmailSubscriberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSubscribers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailSubscribers
     * const emailSubscriber = await prisma.emailSubscriber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailSubscriberUpdateManyArgs>(args: SelectSubset<T, EmailSubscriberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailSubscriber.
     * @param {EmailSubscriberUpsertArgs} args - Arguments to update or create a EmailSubscriber.
     * @example
     * // Update or create a EmailSubscriber
     * const emailSubscriber = await prisma.emailSubscriber.upsert({
     *   create: {
     *     // ... data to create a EmailSubscriber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailSubscriber we want to update
     *   }
     * })
     */
    upsert<T extends EmailSubscriberUpsertArgs>(args: SelectSubset<T, EmailSubscriberUpsertArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmailSubscribers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberCountArgs} args - Arguments to filter EmailSubscribers to count.
     * @example
     * // Count the number of EmailSubscribers
     * const count = await prisma.emailSubscriber.count({
     *   where: {
     *     // ... the filter for the EmailSubscribers we want to count
     *   }
     * })
    **/
    count<T extends EmailSubscriberCountArgs>(
      args?: Subset<T, EmailSubscriberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailSubscriberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailSubscriber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailSubscriberAggregateArgs>(args: Subset<T, EmailSubscriberAggregateArgs>): Prisma.PrismaPromise<GetEmailSubscriberAggregateType<T>>

    /**
     * Group by EmailSubscriber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSubscriberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailSubscriberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailSubscriberGroupByArgs['orderBy'] }
        : { orderBy?: EmailSubscriberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailSubscriberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailSubscriberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailSubscriber model
   */
  readonly fields: EmailSubscriberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailSubscriber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailSubscriberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auditLogs<T extends EmailSubscriber$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, EmailSubscriber$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    dataRequests<T extends EmailSubscriber$dataRequestsArgs<ExtArgs> = {}>(args?: Subset<T, EmailSubscriber$dataRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailSubscriber model
   */ 
  interface EmailSubscriberFieldRefs {
    readonly id: FieldRef<"EmailSubscriber", 'String'>
    readonly email: FieldRef<"EmailSubscriber", 'String'>
    readonly emailHash: FieldRef<"EmailSubscriber", 'String'>
    readonly consentGiven: FieldRef<"EmailSubscriber", 'Boolean'>
    readonly consentTimestamp: FieldRef<"EmailSubscriber", 'DateTime'>
    readonly consentIpAddress: FieldRef<"EmailSubscriber", 'String'>
    readonly consentUserAgent: FieldRef<"EmailSubscriber", 'String'>
    readonly consentVersion: FieldRef<"EmailSubscriber", 'String'>
    readonly isVerified: FieldRef<"EmailSubscriber", 'Boolean'>
    readonly verificationToken: FieldRef<"EmailSubscriber", 'String'>
    readonly verificationSentAt: FieldRef<"EmailSubscriber", 'DateTime'>
    readonly verifiedAt: FieldRef<"EmailSubscriber", 'DateTime'>
    readonly isActive: FieldRef<"EmailSubscriber", 'Boolean'>
    readonly unsubscribeToken: FieldRef<"EmailSubscriber", 'String'>
    readonly unsubscribedAt: FieldRef<"EmailSubscriber", 'DateTime'>
    readonly source: FieldRef<"EmailSubscriber", 'String'>
    readonly utmSource: FieldRef<"EmailSubscriber", 'String'>
    readonly utmMedium: FieldRef<"EmailSubscriber", 'String'>
    readonly utmCampaign: FieldRef<"EmailSubscriber", 'String'>
    readonly createdAt: FieldRef<"EmailSubscriber", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailSubscriber", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailSubscriber findUnique
   */
  export type EmailSubscriberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * Filter, which EmailSubscriber to fetch.
     */
    where: EmailSubscriberWhereUniqueInput
  }

  /**
   * EmailSubscriber findUniqueOrThrow
   */
  export type EmailSubscriberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * Filter, which EmailSubscriber to fetch.
     */
    where: EmailSubscriberWhereUniqueInput
  }

  /**
   * EmailSubscriber findFirst
   */
  export type EmailSubscriberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * Filter, which EmailSubscriber to fetch.
     */
    where?: EmailSubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSubscribers to fetch.
     */
    orderBy?: EmailSubscriberOrderByWithRelationInput | EmailSubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSubscribers.
     */
    cursor?: EmailSubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSubscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSubscribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSubscribers.
     */
    distinct?: EmailSubscriberScalarFieldEnum | EmailSubscriberScalarFieldEnum[]
  }

  /**
   * EmailSubscriber findFirstOrThrow
   */
  export type EmailSubscriberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * Filter, which EmailSubscriber to fetch.
     */
    where?: EmailSubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSubscribers to fetch.
     */
    orderBy?: EmailSubscriberOrderByWithRelationInput | EmailSubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSubscribers.
     */
    cursor?: EmailSubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSubscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSubscribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSubscribers.
     */
    distinct?: EmailSubscriberScalarFieldEnum | EmailSubscriberScalarFieldEnum[]
  }

  /**
   * EmailSubscriber findMany
   */
  export type EmailSubscriberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * Filter, which EmailSubscribers to fetch.
     */
    where?: EmailSubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSubscribers to fetch.
     */
    orderBy?: EmailSubscriberOrderByWithRelationInput | EmailSubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailSubscribers.
     */
    cursor?: EmailSubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSubscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSubscribers.
     */
    skip?: number
    distinct?: EmailSubscriberScalarFieldEnum | EmailSubscriberScalarFieldEnum[]
  }

  /**
   * EmailSubscriber create
   */
  export type EmailSubscriberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailSubscriber.
     */
    data: XOR<EmailSubscriberCreateInput, EmailSubscriberUncheckedCreateInput>
  }

  /**
   * EmailSubscriber createMany
   */
  export type EmailSubscriberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailSubscribers.
     */
    data: EmailSubscriberCreateManyInput | EmailSubscriberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailSubscriber createManyAndReturn
   */
  export type EmailSubscriberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmailSubscribers.
     */
    data: EmailSubscriberCreateManyInput | EmailSubscriberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailSubscriber update
   */
  export type EmailSubscriberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailSubscriber.
     */
    data: XOR<EmailSubscriberUpdateInput, EmailSubscriberUncheckedUpdateInput>
    /**
     * Choose, which EmailSubscriber to update.
     */
    where: EmailSubscriberWhereUniqueInput
  }

  /**
   * EmailSubscriber updateMany
   */
  export type EmailSubscriberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailSubscribers.
     */
    data: XOR<EmailSubscriberUpdateManyMutationInput, EmailSubscriberUncheckedUpdateManyInput>
    /**
     * Filter which EmailSubscribers to update
     */
    where?: EmailSubscriberWhereInput
  }

  /**
   * EmailSubscriber upsert
   */
  export type EmailSubscriberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailSubscriber to update in case it exists.
     */
    where: EmailSubscriberWhereUniqueInput
    /**
     * In case the EmailSubscriber found by the `where` argument doesn't exist, create a new EmailSubscriber with this data.
     */
    create: XOR<EmailSubscriberCreateInput, EmailSubscriberUncheckedCreateInput>
    /**
     * In case the EmailSubscriber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailSubscriberUpdateInput, EmailSubscriberUncheckedUpdateInput>
  }

  /**
   * EmailSubscriber delete
   */
  export type EmailSubscriberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    /**
     * Filter which EmailSubscriber to delete.
     */
    where: EmailSubscriberWhereUniqueInput
  }

  /**
   * EmailSubscriber deleteMany
   */
  export type EmailSubscriberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSubscribers to delete
     */
    where?: EmailSubscriberWhereInput
  }

  /**
   * EmailSubscriber.auditLogs
   */
  export type EmailSubscriber$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * EmailSubscriber.dataRequests
   */
  export type EmailSubscriber$dataRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    where?: DataRequestWhereInput
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    cursor?: DataRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * EmailSubscriber without action
   */
  export type EmailSubscriberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    subscriberId: string | null
    action: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    requestId: string | null
    legalBasis: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    subscriberId: string | null
    action: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    requestId: string | null
    legalBasis: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    subscriberId: number
    action: number
    description: number
    ipAddress: number
    userAgent: number
    requestId: number
    legalBasis: number
    oldData: number
    newData: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    subscriberId?: true
    action?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    requestId?: true
    legalBasis?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    subscriberId?: true
    action?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    requestId?: true
    legalBasis?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    subscriberId?: true
    action?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    requestId?: true
    legalBasis?: true
    oldData?: true
    newData?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    subscriberId: string | null
    action: string
    description: string
    ipAddress: string | null
    userAgent: string | null
    requestId: string | null
    legalBasis: string | null
    oldData: JsonValue | null
    newData: JsonValue | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriberId?: boolean
    action?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestId?: boolean
    legalBasis?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
    subscriber?: boolean | AuditLog$subscriberArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriberId?: boolean
    action?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestId?: boolean
    legalBasis?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
    subscriber?: boolean | AuditLog$subscriberArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    subscriberId?: boolean
    action?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestId?: boolean
    legalBasis?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriber?: boolean | AuditLog$subscriberArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriber?: boolean | AuditLog$subscriberArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      subscriber: Prisma.$EmailSubscriberPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriberId: string | null
      action: string
      description: string
      ipAddress: string | null
      userAgent: string | null
      requestId: string | null
      legalBasis: string | null
      oldData: Prisma.JsonValue | null
      newData: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriber<T extends AuditLog$subscriberArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$subscriberArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly subscriberId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly description: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly requestId: FieldRef<"AuditLog", 'String'>
    readonly legalBasis: FieldRef<"AuditLog", 'String'>
    readonly oldData: FieldRef<"AuditLog", 'Json'>
    readonly newData: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.subscriber
   */
  export type AuditLog$subscriberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    where?: EmailSubscriberWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model DataRequest
   */

  export type AggregateDataRequest = {
    _count: DataRequestCountAggregateOutputType | null
    _min: DataRequestMinAggregateOutputType | null
    _max: DataRequestMaxAggregateOutputType | null
  }

  export type DataRequestMinAggregateOutputType = {
    id: string | null
    subscriberId: string | null
    type: $Enums.DataRequestType | null
    status: $Enums.DataRequestStatus | null
    requestEmail: string | null
    processedAt: Date | null
    processedBy: string | null
    verificationToken: string | null
    verificationSentAt: Date | null
    verifiedAt: Date | null
    exportUrl: string | null
    exportExpiresAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataRequestMaxAggregateOutputType = {
    id: string | null
    subscriberId: string | null
    type: $Enums.DataRequestType | null
    status: $Enums.DataRequestStatus | null
    requestEmail: string | null
    processedAt: Date | null
    processedBy: string | null
    verificationToken: string | null
    verificationSentAt: Date | null
    verifiedAt: Date | null
    exportUrl: string | null
    exportExpiresAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataRequestCountAggregateOutputType = {
    id: number
    subscriberId: number
    type: number
    status: number
    requestEmail: number
    processedAt: number
    processedBy: number
    verificationToken: number
    verificationSentAt: number
    verifiedAt: number
    exportData: number
    exportUrl: number
    exportExpiresAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DataRequestMinAggregateInputType = {
    id?: true
    subscriberId?: true
    type?: true
    status?: true
    requestEmail?: true
    processedAt?: true
    processedBy?: true
    verificationToken?: true
    verificationSentAt?: true
    verifiedAt?: true
    exportUrl?: true
    exportExpiresAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataRequestMaxAggregateInputType = {
    id?: true
    subscriberId?: true
    type?: true
    status?: true
    requestEmail?: true
    processedAt?: true
    processedBy?: true
    verificationToken?: true
    verificationSentAt?: true
    verifiedAt?: true
    exportUrl?: true
    exportExpiresAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataRequestCountAggregateInputType = {
    id?: true
    subscriberId?: true
    type?: true
    status?: true
    requestEmail?: true
    processedAt?: true
    processedBy?: true
    verificationToken?: true
    verificationSentAt?: true
    verifiedAt?: true
    exportData?: true
    exportUrl?: true
    exportExpiresAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DataRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataRequest to aggregate.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataRequests
    **/
    _count?: true | DataRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataRequestMaxAggregateInputType
  }

  export type GetDataRequestAggregateType<T extends DataRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDataRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataRequest[P]>
      : GetScalarType<T[P], AggregateDataRequest[P]>
  }




  export type DataRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataRequestWhereInput
    orderBy?: DataRequestOrderByWithAggregationInput | DataRequestOrderByWithAggregationInput[]
    by: DataRequestScalarFieldEnum[] | DataRequestScalarFieldEnum
    having?: DataRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataRequestCountAggregateInputType | true
    _min?: DataRequestMinAggregateInputType
    _max?: DataRequestMaxAggregateInputType
  }

  export type DataRequestGroupByOutputType = {
    id: string
    subscriberId: string | null
    type: $Enums.DataRequestType
    status: $Enums.DataRequestStatus
    requestEmail: string
    processedAt: Date | null
    processedBy: string | null
    verificationToken: string
    verificationSentAt: Date | null
    verifiedAt: Date | null
    exportData: JsonValue | null
    exportUrl: string | null
    exportExpiresAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DataRequestCountAggregateOutputType | null
    _min: DataRequestMinAggregateOutputType | null
    _max: DataRequestMaxAggregateOutputType | null
  }

  type GetDataRequestGroupByPayload<T extends DataRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DataRequestGroupByOutputType[P]>
        }
      >
    >


  export type DataRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriberId?: boolean
    type?: boolean
    status?: boolean
    requestEmail?: boolean
    processedAt?: boolean
    processedBy?: boolean
    verificationToken?: boolean
    verificationSentAt?: boolean
    verifiedAt?: boolean
    exportData?: boolean
    exportUrl?: boolean
    exportExpiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriber?: boolean | DataRequest$subscriberArgs<ExtArgs>
  }, ExtArgs["result"]["dataRequest"]>

  export type DataRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriberId?: boolean
    type?: boolean
    status?: boolean
    requestEmail?: boolean
    processedAt?: boolean
    processedBy?: boolean
    verificationToken?: boolean
    verificationSentAt?: boolean
    verifiedAt?: boolean
    exportData?: boolean
    exportUrl?: boolean
    exportExpiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriber?: boolean | DataRequest$subscriberArgs<ExtArgs>
  }, ExtArgs["result"]["dataRequest"]>

  export type DataRequestSelectScalar = {
    id?: boolean
    subscriberId?: boolean
    type?: boolean
    status?: boolean
    requestEmail?: boolean
    processedAt?: boolean
    processedBy?: boolean
    verificationToken?: boolean
    verificationSentAt?: boolean
    verifiedAt?: boolean
    exportData?: boolean
    exportUrl?: boolean
    exportExpiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DataRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriber?: boolean | DataRequest$subscriberArgs<ExtArgs>
  }
  export type DataRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriber?: boolean | DataRequest$subscriberArgs<ExtArgs>
  }

  export type $DataRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataRequest"
    objects: {
      subscriber: Prisma.$EmailSubscriberPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriberId: string | null
      type: $Enums.DataRequestType
      status: $Enums.DataRequestStatus
      requestEmail: string
      processedAt: Date | null
      processedBy: string | null
      verificationToken: string
      verificationSentAt: Date | null
      verifiedAt: Date | null
      exportData: Prisma.JsonValue | null
      exportUrl: string | null
      exportExpiresAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dataRequest"]>
    composites: {}
  }

  type DataRequestGetPayload<S extends boolean | null | undefined | DataRequestDefaultArgs> = $Result.GetResult<Prisma.$DataRequestPayload, S>

  type DataRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DataRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DataRequestCountAggregateInputType | true
    }

  export interface DataRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataRequest'], meta: { name: 'DataRequest' } }
    /**
     * Find zero or one DataRequest that matches the filter.
     * @param {DataRequestFindUniqueArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataRequestFindUniqueArgs>(args: SelectSubset<T, DataRequestFindUniqueArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DataRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DataRequestFindUniqueOrThrowArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DataRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DataRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestFindFirstArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataRequestFindFirstArgs>(args?: SelectSubset<T, DataRequestFindFirstArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DataRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestFindFirstOrThrowArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DataRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DataRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataRequests
     * const dataRequests = await prisma.dataRequest.findMany()
     * 
     * // Get first 10 DataRequests
     * const dataRequests = await prisma.dataRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataRequestWithIdOnly = await prisma.dataRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataRequestFindManyArgs>(args?: SelectSubset<T, DataRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DataRequest.
     * @param {DataRequestCreateArgs} args - Arguments to create a DataRequest.
     * @example
     * // Create one DataRequest
     * const DataRequest = await prisma.dataRequest.create({
     *   data: {
     *     // ... data to create a DataRequest
     *   }
     * })
     * 
     */
    create<T extends DataRequestCreateArgs>(args: SelectSubset<T, DataRequestCreateArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DataRequests.
     * @param {DataRequestCreateManyArgs} args - Arguments to create many DataRequests.
     * @example
     * // Create many DataRequests
     * const dataRequest = await prisma.dataRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataRequestCreateManyArgs>(args?: SelectSubset<T, DataRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DataRequests and returns the data saved in the database.
     * @param {DataRequestCreateManyAndReturnArgs} args - Arguments to create many DataRequests.
     * @example
     * // Create many DataRequests
     * const dataRequest = await prisma.dataRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DataRequests and only return the `id`
     * const dataRequestWithIdOnly = await prisma.dataRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DataRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, DataRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DataRequest.
     * @param {DataRequestDeleteArgs} args - Arguments to delete one DataRequest.
     * @example
     * // Delete one DataRequest
     * const DataRequest = await prisma.dataRequest.delete({
     *   where: {
     *     // ... filter to delete one DataRequest
     *   }
     * })
     * 
     */
    delete<T extends DataRequestDeleteArgs>(args: SelectSubset<T, DataRequestDeleteArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DataRequest.
     * @param {DataRequestUpdateArgs} args - Arguments to update one DataRequest.
     * @example
     * // Update one DataRequest
     * const dataRequest = await prisma.dataRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataRequestUpdateArgs>(args: SelectSubset<T, DataRequestUpdateArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DataRequests.
     * @param {DataRequestDeleteManyArgs} args - Arguments to filter DataRequests to delete.
     * @example
     * // Delete a few DataRequests
     * const { count } = await prisma.dataRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataRequestDeleteManyArgs>(args?: SelectSubset<T, DataRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataRequests
     * const dataRequest = await prisma.dataRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataRequestUpdateManyArgs>(args: SelectSubset<T, DataRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DataRequest.
     * @param {DataRequestUpsertArgs} args - Arguments to update or create a DataRequest.
     * @example
     * // Update or create a DataRequest
     * const dataRequest = await prisma.dataRequest.upsert({
     *   create: {
     *     // ... data to create a DataRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataRequest we want to update
     *   }
     * })
     */
    upsert<T extends DataRequestUpsertArgs>(args: SelectSubset<T, DataRequestUpsertArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DataRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestCountArgs} args - Arguments to filter DataRequests to count.
     * @example
     * // Count the number of DataRequests
     * const count = await prisma.dataRequest.count({
     *   where: {
     *     // ... the filter for the DataRequests we want to count
     *   }
     * })
    **/
    count<T extends DataRequestCountArgs>(
      args?: Subset<T, DataRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataRequestAggregateArgs>(args: Subset<T, DataRequestAggregateArgs>): Prisma.PrismaPromise<GetDataRequestAggregateType<T>>

    /**
     * Group by DataRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataRequestGroupByArgs['orderBy'] }
        : { orderBy?: DataRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataRequest model
   */
  readonly fields: DataRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriber<T extends DataRequest$subscriberArgs<ExtArgs> = {}>(args?: Subset<T, DataRequest$subscriberArgs<ExtArgs>>): Prisma__EmailSubscriberClient<$Result.GetResult<Prisma.$EmailSubscriberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataRequest model
   */ 
  interface DataRequestFieldRefs {
    readonly id: FieldRef<"DataRequest", 'String'>
    readonly subscriberId: FieldRef<"DataRequest", 'String'>
    readonly type: FieldRef<"DataRequest", 'DataRequestType'>
    readonly status: FieldRef<"DataRequest", 'DataRequestStatus'>
    readonly requestEmail: FieldRef<"DataRequest", 'String'>
    readonly processedAt: FieldRef<"DataRequest", 'DateTime'>
    readonly processedBy: FieldRef<"DataRequest", 'String'>
    readonly verificationToken: FieldRef<"DataRequest", 'String'>
    readonly verificationSentAt: FieldRef<"DataRequest", 'DateTime'>
    readonly verifiedAt: FieldRef<"DataRequest", 'DateTime'>
    readonly exportData: FieldRef<"DataRequest", 'Json'>
    readonly exportUrl: FieldRef<"DataRequest", 'String'>
    readonly exportExpiresAt: FieldRef<"DataRequest", 'DateTime'>
    readonly notes: FieldRef<"DataRequest", 'String'>
    readonly createdAt: FieldRef<"DataRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DataRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DataRequest findUnique
   */
  export type DataRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest findUniqueOrThrow
   */
  export type DataRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest findFirst
   */
  export type DataRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataRequests.
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataRequests.
     */
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * DataRequest findFirstOrThrow
   */
  export type DataRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataRequests.
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataRequests.
     */
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * DataRequest findMany
   */
  export type DataRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequests to fetch.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataRequests.
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * DataRequest create
   */
  export type DataRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DataRequest.
     */
    data: XOR<DataRequestCreateInput, DataRequestUncheckedCreateInput>
  }

  /**
   * DataRequest createMany
   */
  export type DataRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataRequests.
     */
    data: DataRequestCreateManyInput | DataRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataRequest createManyAndReturn
   */
  export type DataRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DataRequests.
     */
    data: DataRequestCreateManyInput | DataRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataRequest update
   */
  export type DataRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DataRequest.
     */
    data: XOR<DataRequestUpdateInput, DataRequestUncheckedUpdateInput>
    /**
     * Choose, which DataRequest to update.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest updateMany
   */
  export type DataRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataRequests.
     */
    data: XOR<DataRequestUpdateManyMutationInput, DataRequestUncheckedUpdateManyInput>
    /**
     * Filter which DataRequests to update
     */
    where?: DataRequestWhereInput
  }

  /**
   * DataRequest upsert
   */
  export type DataRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DataRequest to update in case it exists.
     */
    where: DataRequestWhereUniqueInput
    /**
     * In case the DataRequest found by the `where` argument doesn't exist, create a new DataRequest with this data.
     */
    create: XOR<DataRequestCreateInput, DataRequestUncheckedCreateInput>
    /**
     * In case the DataRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataRequestUpdateInput, DataRequestUncheckedUpdateInput>
  }

  /**
   * DataRequest delete
   */
  export type DataRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter which DataRequest to delete.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest deleteMany
   */
  export type DataRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataRequests to delete
     */
    where?: DataRequestWhereInput
  }

  /**
   * DataRequest.subscriber
   */
  export type DataRequest$subscriberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSubscriber
     */
    select?: EmailSubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSubscriberInclude<ExtArgs> | null
    where?: EmailSubscriberWhereInput
  }

  /**
   * DataRequest without action
   */
  export type DataRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
  }


  /**
   * Model ConsentRecord
   */

  export type AggregateConsentRecord = {
    _count: ConsentRecordCountAggregateOutputType | null
    _min: ConsentRecordMinAggregateOutputType | null
    _max: ConsentRecordMaxAggregateOutputType | null
  }

  export type ConsentRecordMinAggregateOutputType = {
    id: string | null
    email: string | null
    consentType: string | null
    consentGiven: boolean | null
    consentVersion: string | null
    legalBasis: string | null
    purpose: string | null
    ipAddress: string | null
    userAgent: string | null
    source: string | null
    timestamp: Date | null
    expiresAt: Date | null
  }

  export type ConsentRecordMaxAggregateOutputType = {
    id: string | null
    email: string | null
    consentType: string | null
    consentGiven: boolean | null
    consentVersion: string | null
    legalBasis: string | null
    purpose: string | null
    ipAddress: string | null
    userAgent: string | null
    source: string | null
    timestamp: Date | null
    expiresAt: Date | null
  }

  export type ConsentRecordCountAggregateOutputType = {
    id: number
    email: number
    consentType: number
    consentGiven: number
    consentVersion: number
    legalBasis: number
    purpose: number
    ipAddress: number
    userAgent: number
    source: number
    timestamp: number
    expiresAt: number
    _all: number
  }


  export type ConsentRecordMinAggregateInputType = {
    id?: true
    email?: true
    consentType?: true
    consentGiven?: true
    consentVersion?: true
    legalBasis?: true
    purpose?: true
    ipAddress?: true
    userAgent?: true
    source?: true
    timestamp?: true
    expiresAt?: true
  }

  export type ConsentRecordMaxAggregateInputType = {
    id?: true
    email?: true
    consentType?: true
    consentGiven?: true
    consentVersion?: true
    legalBasis?: true
    purpose?: true
    ipAddress?: true
    userAgent?: true
    source?: true
    timestamp?: true
    expiresAt?: true
  }

  export type ConsentRecordCountAggregateInputType = {
    id?: true
    email?: true
    consentType?: true
    consentGiven?: true
    consentVersion?: true
    legalBasis?: true
    purpose?: true
    ipAddress?: true
    userAgent?: true
    source?: true
    timestamp?: true
    expiresAt?: true
    _all?: true
  }

  export type ConsentRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsentRecord to aggregate.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsentRecords
    **/
    _count?: true | ConsentRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsentRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsentRecordMaxAggregateInputType
  }

  export type GetConsentRecordAggregateType<T extends ConsentRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateConsentRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsentRecord[P]>
      : GetScalarType<T[P], AggregateConsentRecord[P]>
  }




  export type ConsentRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsentRecordWhereInput
    orderBy?: ConsentRecordOrderByWithAggregationInput | ConsentRecordOrderByWithAggregationInput[]
    by: ConsentRecordScalarFieldEnum[] | ConsentRecordScalarFieldEnum
    having?: ConsentRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsentRecordCountAggregateInputType | true
    _min?: ConsentRecordMinAggregateInputType
    _max?: ConsentRecordMaxAggregateInputType
  }

  export type ConsentRecordGroupByOutputType = {
    id: string
    email: string
    consentType: string
    consentGiven: boolean
    consentVersion: string
    legalBasis: string
    purpose: string
    ipAddress: string | null
    userAgent: string | null
    source: string | null
    timestamp: Date
    expiresAt: Date | null
    _count: ConsentRecordCountAggregateOutputType | null
    _min: ConsentRecordMinAggregateOutputType | null
    _max: ConsentRecordMaxAggregateOutputType | null
  }

  type GetConsentRecordGroupByPayload<T extends ConsentRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsentRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsentRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsentRecordGroupByOutputType[P]>
            : GetScalarType<T[P], ConsentRecordGroupByOutputType[P]>
        }
      >
    >


  export type ConsentRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    consentType?: boolean
    consentGiven?: boolean
    consentVersion?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    source?: boolean
    timestamp?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["consentRecord"]>

  export type ConsentRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    consentType?: boolean
    consentGiven?: boolean
    consentVersion?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    source?: boolean
    timestamp?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["consentRecord"]>

  export type ConsentRecordSelectScalar = {
    id?: boolean
    email?: boolean
    consentType?: boolean
    consentGiven?: boolean
    consentVersion?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    source?: boolean
    timestamp?: boolean
    expiresAt?: boolean
  }


  export type $ConsentRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsentRecord"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      consentType: string
      consentGiven: boolean
      consentVersion: string
      legalBasis: string
      purpose: string
      ipAddress: string | null
      userAgent: string | null
      source: string | null
      timestamp: Date
      expiresAt: Date | null
    }, ExtArgs["result"]["consentRecord"]>
    composites: {}
  }

  type ConsentRecordGetPayload<S extends boolean | null | undefined | ConsentRecordDefaultArgs> = $Result.GetResult<Prisma.$ConsentRecordPayload, S>

  type ConsentRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsentRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsentRecordCountAggregateInputType | true
    }

  export interface ConsentRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsentRecord'], meta: { name: 'ConsentRecord' } }
    /**
     * Find zero or one ConsentRecord that matches the filter.
     * @param {ConsentRecordFindUniqueArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsentRecordFindUniqueArgs>(args: SelectSubset<T, ConsentRecordFindUniqueArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConsentRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsentRecordFindUniqueOrThrowArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsentRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsentRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConsentRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordFindFirstArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsentRecordFindFirstArgs>(args?: SelectSubset<T, ConsentRecordFindFirstArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConsentRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordFindFirstOrThrowArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsentRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsentRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConsentRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsentRecords
     * const consentRecords = await prisma.consentRecord.findMany()
     * 
     * // Get first 10 ConsentRecords
     * const consentRecords = await prisma.consentRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consentRecordWithIdOnly = await prisma.consentRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsentRecordFindManyArgs>(args?: SelectSubset<T, ConsentRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConsentRecord.
     * @param {ConsentRecordCreateArgs} args - Arguments to create a ConsentRecord.
     * @example
     * // Create one ConsentRecord
     * const ConsentRecord = await prisma.consentRecord.create({
     *   data: {
     *     // ... data to create a ConsentRecord
     *   }
     * })
     * 
     */
    create<T extends ConsentRecordCreateArgs>(args: SelectSubset<T, ConsentRecordCreateArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConsentRecords.
     * @param {ConsentRecordCreateManyArgs} args - Arguments to create many ConsentRecords.
     * @example
     * // Create many ConsentRecords
     * const consentRecord = await prisma.consentRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsentRecordCreateManyArgs>(args?: SelectSubset<T, ConsentRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsentRecords and returns the data saved in the database.
     * @param {ConsentRecordCreateManyAndReturnArgs} args - Arguments to create many ConsentRecords.
     * @example
     * // Create many ConsentRecords
     * const consentRecord = await prisma.consentRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsentRecords and only return the `id`
     * const consentRecordWithIdOnly = await prisma.consentRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsentRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsentRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConsentRecord.
     * @param {ConsentRecordDeleteArgs} args - Arguments to delete one ConsentRecord.
     * @example
     * // Delete one ConsentRecord
     * const ConsentRecord = await prisma.consentRecord.delete({
     *   where: {
     *     // ... filter to delete one ConsentRecord
     *   }
     * })
     * 
     */
    delete<T extends ConsentRecordDeleteArgs>(args: SelectSubset<T, ConsentRecordDeleteArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConsentRecord.
     * @param {ConsentRecordUpdateArgs} args - Arguments to update one ConsentRecord.
     * @example
     * // Update one ConsentRecord
     * const consentRecord = await prisma.consentRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsentRecordUpdateArgs>(args: SelectSubset<T, ConsentRecordUpdateArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConsentRecords.
     * @param {ConsentRecordDeleteManyArgs} args - Arguments to filter ConsentRecords to delete.
     * @example
     * // Delete a few ConsentRecords
     * const { count } = await prisma.consentRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsentRecordDeleteManyArgs>(args?: SelectSubset<T, ConsentRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsentRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsentRecords
     * const consentRecord = await prisma.consentRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsentRecordUpdateManyArgs>(args: SelectSubset<T, ConsentRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsentRecord.
     * @param {ConsentRecordUpsertArgs} args - Arguments to update or create a ConsentRecord.
     * @example
     * // Update or create a ConsentRecord
     * const consentRecord = await prisma.consentRecord.upsert({
     *   create: {
     *     // ... data to create a ConsentRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsentRecord we want to update
     *   }
     * })
     */
    upsert<T extends ConsentRecordUpsertArgs>(args: SelectSubset<T, ConsentRecordUpsertArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConsentRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordCountArgs} args - Arguments to filter ConsentRecords to count.
     * @example
     * // Count the number of ConsentRecords
     * const count = await prisma.consentRecord.count({
     *   where: {
     *     // ... the filter for the ConsentRecords we want to count
     *   }
     * })
    **/
    count<T extends ConsentRecordCountArgs>(
      args?: Subset<T, ConsentRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsentRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsentRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsentRecordAggregateArgs>(args: Subset<T, ConsentRecordAggregateArgs>): Prisma.PrismaPromise<GetConsentRecordAggregateType<T>>

    /**
     * Group by ConsentRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsentRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsentRecordGroupByArgs['orderBy'] }
        : { orderBy?: ConsentRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsentRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsentRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsentRecord model
   */
  readonly fields: ConsentRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsentRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsentRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsentRecord model
   */ 
  interface ConsentRecordFieldRefs {
    readonly id: FieldRef<"ConsentRecord", 'String'>
    readonly email: FieldRef<"ConsentRecord", 'String'>
    readonly consentType: FieldRef<"ConsentRecord", 'String'>
    readonly consentGiven: FieldRef<"ConsentRecord", 'Boolean'>
    readonly consentVersion: FieldRef<"ConsentRecord", 'String'>
    readonly legalBasis: FieldRef<"ConsentRecord", 'String'>
    readonly purpose: FieldRef<"ConsentRecord", 'String'>
    readonly ipAddress: FieldRef<"ConsentRecord", 'String'>
    readonly userAgent: FieldRef<"ConsentRecord", 'String'>
    readonly source: FieldRef<"ConsentRecord", 'String'>
    readonly timestamp: FieldRef<"ConsentRecord", 'DateTime'>
    readonly expiresAt: FieldRef<"ConsentRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConsentRecord findUnique
   */
  export type ConsentRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord findUniqueOrThrow
   */
  export type ConsentRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord findFirst
   */
  export type ConsentRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsentRecords.
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsentRecords.
     */
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * ConsentRecord findFirstOrThrow
   */
  export type ConsentRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsentRecords.
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsentRecords.
     */
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * ConsentRecord findMany
   */
  export type ConsentRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Filter, which ConsentRecords to fetch.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsentRecords.
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * ConsentRecord create
   */
  export type ConsentRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * The data needed to create a ConsentRecord.
     */
    data: XOR<ConsentRecordCreateInput, ConsentRecordUncheckedCreateInput>
  }

  /**
   * ConsentRecord createMany
   */
  export type ConsentRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsentRecords.
     */
    data: ConsentRecordCreateManyInput | ConsentRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsentRecord createManyAndReturn
   */
  export type ConsentRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConsentRecords.
     */
    data: ConsentRecordCreateManyInput | ConsentRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsentRecord update
   */
  export type ConsentRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * The data needed to update a ConsentRecord.
     */
    data: XOR<ConsentRecordUpdateInput, ConsentRecordUncheckedUpdateInput>
    /**
     * Choose, which ConsentRecord to update.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord updateMany
   */
  export type ConsentRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsentRecords.
     */
    data: XOR<ConsentRecordUpdateManyMutationInput, ConsentRecordUncheckedUpdateManyInput>
    /**
     * Filter which ConsentRecords to update
     */
    where?: ConsentRecordWhereInput
  }

  /**
   * ConsentRecord upsert
   */
  export type ConsentRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * The filter to search for the ConsentRecord to update in case it exists.
     */
    where: ConsentRecordWhereUniqueInput
    /**
     * In case the ConsentRecord found by the `where` argument doesn't exist, create a new ConsentRecord with this data.
     */
    create: XOR<ConsentRecordCreateInput, ConsentRecordUncheckedCreateInput>
    /**
     * In case the ConsentRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsentRecordUpdateInput, ConsentRecordUncheckedUpdateInput>
  }

  /**
   * ConsentRecord delete
   */
  export type ConsentRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Filter which ConsentRecord to delete.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord deleteMany
   */
  export type ConsentRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsentRecords to delete
     */
    where?: ConsentRecordWhereInput
  }

  /**
   * ConsentRecord without action
   */
  export type ConsentRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
  }


  /**
   * Model AdminUser
   */

  export type AggregateAdminUser = {
    _count: AdminUserCountAggregateOutputType | null
    _avg: AdminUserAvgAggregateOutputType | null
    _sum: AdminUserSumAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  export type AdminUserAvgAggregateOutputType = {
    failedLoginAttempts: number | null
  }

  export type AdminUserSumAggregateOutputType = {
    failedLoginAttempts: number | null
  }

  export type AdminUserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.AdminRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    lastLoginIp: string | null
    failedLoginAttempts: number | null
    lockedUntil: Date | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminUserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.AdminRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    lastLoginIp: string | null
    failedLoginAttempts: number | null
    lockedUntil: Date | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminUserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    isActive: number
    lastLoginAt: number
    lastLoginIp: number
    failedLoginAttempts: number
    lockedUntil: number
    twoFactorSecret: number
    twoFactorEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminUserAvgAggregateInputType = {
    failedLoginAttempts?: true
  }

  export type AdminUserSumAggregateInputType = {
    failedLoginAttempts?: true
  }

  export type AdminUserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    lastLoginIp?: true
    failedLoginAttempts?: true
    lockedUntil?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminUserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    lastLoginIp?: true
    failedLoginAttempts?: true
    lockedUntil?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminUserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    lastLoginIp?: true
    failedLoginAttempts?: true
    lockedUntil?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUser to aggregate.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminUsers
    **/
    _count?: true | AdminUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminUserMaxAggregateInputType
  }

  export type GetAdminUserAggregateType<T extends AdminUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminUser[P]>
      : GetScalarType<T[P], AggregateAdminUser[P]>
  }




  export type AdminUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminUserWhereInput
    orderBy?: AdminUserOrderByWithAggregationInput | AdminUserOrderByWithAggregationInput[]
    by: AdminUserScalarFieldEnum[] | AdminUserScalarFieldEnum
    having?: AdminUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminUserCountAggregateInputType | true
    _avg?: AdminUserAvgAggregateInputType
    _sum?: AdminUserSumAggregateInputType
    _min?: AdminUserMinAggregateInputType
    _max?: AdminUserMaxAggregateInputType
  }

  export type AdminUserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: $Enums.AdminRole
    isActive: boolean
    lastLoginAt: Date | null
    lastLoginIp: string | null
    failedLoginAttempts: number
    lockedUntil: Date | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: AdminUserCountAggregateOutputType | null
    _avg: AdminUserAvgAggregateOutputType | null
    _sum: AdminUserSumAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  type GetAdminUserGroupByPayload<T extends AdminUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
            : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
        }
      >
    >


  export type AdminUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    lastLoginIp?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    lastLoginIp?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    lastLoginIp?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $AdminUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: $Enums.AdminRole
      isActive: boolean
      lastLoginAt: Date | null
      lastLoginIp: string | null
      failedLoginAttempts: number
      lockedUntil: Date | null
      twoFactorSecret: string | null
      twoFactorEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["adminUser"]>
    composites: {}
  }

  type AdminUserGetPayload<S extends boolean | null | undefined | AdminUserDefaultArgs> = $Result.GetResult<Prisma.$AdminUserPayload, S>

  type AdminUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminUserCountAggregateInputType | true
    }

  export interface AdminUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminUser'], meta: { name: 'AdminUser' } }
    /**
     * Find zero or one AdminUser that matches the filter.
     * @param {AdminUserFindUniqueArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminUserFindUniqueArgs>(args: SelectSubset<T, AdminUserFindUniqueArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdminUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminUserFindUniqueOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminUserFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdminUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminUserFindFirstArgs>(args?: SelectSubset<T, AdminUserFindFirstArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdminUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminUserFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdminUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminUsers
     * const adminUsers = await prisma.adminUser.findMany()
     * 
     * // Get first 10 AdminUsers
     * const adminUsers = await prisma.adminUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminUserFindManyArgs>(args?: SelectSubset<T, AdminUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdminUser.
     * @param {AdminUserCreateArgs} args - Arguments to create a AdminUser.
     * @example
     * // Create one AdminUser
     * const AdminUser = await prisma.adminUser.create({
     *   data: {
     *     // ... data to create a AdminUser
     *   }
     * })
     * 
     */
    create<T extends AdminUserCreateArgs>(args: SelectSubset<T, AdminUserCreateArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdminUsers.
     * @param {AdminUserCreateManyArgs} args - Arguments to create many AdminUsers.
     * @example
     * // Create many AdminUsers
     * const adminUser = await prisma.adminUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminUserCreateManyArgs>(args?: SelectSubset<T, AdminUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminUsers and returns the data saved in the database.
     * @param {AdminUserCreateManyAndReturnArgs} args - Arguments to create many AdminUsers.
     * @example
     * // Create many AdminUsers
     * const adminUser = await prisma.adminUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminUsers and only return the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminUserCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdminUser.
     * @param {AdminUserDeleteArgs} args - Arguments to delete one AdminUser.
     * @example
     * // Delete one AdminUser
     * const AdminUser = await prisma.adminUser.delete({
     *   where: {
     *     // ... filter to delete one AdminUser
     *   }
     * })
     * 
     */
    delete<T extends AdminUserDeleteArgs>(args: SelectSubset<T, AdminUserDeleteArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdminUser.
     * @param {AdminUserUpdateArgs} args - Arguments to update one AdminUser.
     * @example
     * // Update one AdminUser
     * const adminUser = await prisma.adminUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUserUpdateArgs>(args: SelectSubset<T, AdminUserUpdateArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdminUsers.
     * @param {AdminUserDeleteManyArgs} args - Arguments to filter AdminUsers to delete.
     * @example
     * // Delete a few AdminUsers
     * const { count } = await prisma.adminUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminUserDeleteManyArgs>(args?: SelectSubset<T, AdminUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminUsers
     * const adminUser = await prisma.adminUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUserUpdateManyArgs>(args: SelectSubset<T, AdminUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminUser.
     * @param {AdminUserUpsertArgs} args - Arguments to update or create a AdminUser.
     * @example
     * // Update or create a AdminUser
     * const adminUser = await prisma.adminUser.upsert({
     *   create: {
     *     // ... data to create a AdminUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminUser we want to update
     *   }
     * })
     */
    upsert<T extends AdminUserUpsertArgs>(args: SelectSubset<T, AdminUserUpsertArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserCountArgs} args - Arguments to filter AdminUsers to count.
     * @example
     * // Count the number of AdminUsers
     * const count = await prisma.adminUser.count({
     *   where: {
     *     // ... the filter for the AdminUsers we want to count
     *   }
     * })
    **/
    count<T extends AdminUserCountArgs>(
      args?: Subset<T, AdminUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminUserAggregateArgs>(args: Subset<T, AdminUserAggregateArgs>): Prisma.PrismaPromise<GetAdminUserAggregateType<T>>

    /**
     * Group by AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminUserGroupByArgs['orderBy'] }
        : { orderBy?: AdminUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminUser model
   */
  readonly fields: AdminUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminUser model
   */ 
  interface AdminUserFieldRefs {
    readonly id: FieldRef<"AdminUser", 'String'>
    readonly email: FieldRef<"AdminUser", 'String'>
    readonly passwordHash: FieldRef<"AdminUser", 'String'>
    readonly role: FieldRef<"AdminUser", 'AdminRole'>
    readonly isActive: FieldRef<"AdminUser", 'Boolean'>
    readonly lastLoginAt: FieldRef<"AdminUser", 'DateTime'>
    readonly lastLoginIp: FieldRef<"AdminUser", 'String'>
    readonly failedLoginAttempts: FieldRef<"AdminUser", 'Int'>
    readonly lockedUntil: FieldRef<"AdminUser", 'DateTime'>
    readonly twoFactorSecret: FieldRef<"AdminUser", 'String'>
    readonly twoFactorEnabled: FieldRef<"AdminUser", 'Boolean'>
    readonly createdAt: FieldRef<"AdminUser", 'DateTime'>
    readonly updatedAt: FieldRef<"AdminUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminUser findUnique
   */
  export type AdminUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser findUniqueOrThrow
   */
  export type AdminUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser findFirst
   */
  export type AdminUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser findFirstOrThrow
   */
  export type AdminUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser findMany
   */
  export type AdminUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Filter, which AdminUsers to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser create
   */
  export type AdminUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * The data needed to create a AdminUser.
     */
    data: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
  }

  /**
   * AdminUser createMany
   */
  export type AdminUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminUser createManyAndReturn
   */
  export type AdminUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminUser update
   */
  export type AdminUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * The data needed to update a AdminUser.
     */
    data: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
    /**
     * Choose, which AdminUser to update.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser updateMany
   */
  export type AdminUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminUsers.
     */
    data: XOR<AdminUserUpdateManyMutationInput, AdminUserUncheckedUpdateManyInput>
    /**
     * Filter which AdminUsers to update
     */
    where?: AdminUserWhereInput
  }

  /**
   * AdminUser upsert
   */
  export type AdminUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * The filter to search for the AdminUser to update in case it exists.
     */
    where: AdminUserWhereUniqueInput
    /**
     * In case the AdminUser found by the `where` argument doesn't exist, create a new AdminUser with this data.
     */
    create: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
    /**
     * In case the AdminUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
  }

  /**
   * AdminUser delete
   */
  export type AdminUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Filter which AdminUser to delete.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser deleteMany
   */
  export type AdminUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUsers to delete
     */
    where?: AdminUserWhereInput
  }

  /**
   * AdminUser without action
   */
  export type AdminUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmailSubscriberScalarFieldEnum: {
    id: 'id',
    email: 'email',
    emailHash: 'emailHash',
    consentGiven: 'consentGiven',
    consentTimestamp: 'consentTimestamp',
    consentIpAddress: 'consentIpAddress',
    consentUserAgent: 'consentUserAgent',
    consentVersion: 'consentVersion',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    verificationSentAt: 'verificationSentAt',
    verifiedAt: 'verifiedAt',
    isActive: 'isActive',
    unsubscribeToken: 'unsubscribeToken',
    unsubscribedAt: 'unsubscribedAt',
    source: 'source',
    utmSource: 'utmSource',
    utmMedium: 'utmMedium',
    utmCampaign: 'utmCampaign',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailSubscriberScalarFieldEnum = (typeof EmailSubscriberScalarFieldEnum)[keyof typeof EmailSubscriberScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    subscriberId: 'subscriberId',
    action: 'action',
    description: 'description',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    requestId: 'requestId',
    legalBasis: 'legalBasis',
    oldData: 'oldData',
    newData: 'newData',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const DataRequestScalarFieldEnum: {
    id: 'id',
    subscriberId: 'subscriberId',
    type: 'type',
    status: 'status',
    requestEmail: 'requestEmail',
    processedAt: 'processedAt',
    processedBy: 'processedBy',
    verificationToken: 'verificationToken',
    verificationSentAt: 'verificationSentAt',
    verifiedAt: 'verifiedAt',
    exportData: 'exportData',
    exportUrl: 'exportUrl',
    exportExpiresAt: 'exportExpiresAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DataRequestScalarFieldEnum = (typeof DataRequestScalarFieldEnum)[keyof typeof DataRequestScalarFieldEnum]


  export const ConsentRecordScalarFieldEnum: {
    id: 'id',
    email: 'email',
    consentType: 'consentType',
    consentGiven: 'consentGiven',
    consentVersion: 'consentVersion',
    legalBasis: 'legalBasis',
    purpose: 'purpose',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    source: 'source',
    timestamp: 'timestamp',
    expiresAt: 'expiresAt'
  };

  export type ConsentRecordScalarFieldEnum = (typeof ConsentRecordScalarFieldEnum)[keyof typeof ConsentRecordScalarFieldEnum]


  export const AdminUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    lastLoginIp: 'lastLoginIp',
    failedLoginAttempts: 'failedLoginAttempts',
    lockedUntil: 'lockedUntil',
    twoFactorSecret: 'twoFactorSecret',
    twoFactorEnabled: 'twoFactorEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminUserScalarFieldEnum = (typeof AdminUserScalarFieldEnum)[keyof typeof AdminUserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DataRequestType'
   */
  export type EnumDataRequestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestType'>
    


  /**
   * Reference to a field of type 'DataRequestType[]'
   */
  export type ListEnumDataRequestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestType[]'>
    


  /**
   * Reference to a field of type 'DataRequestStatus'
   */
  export type EnumDataRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestStatus'>
    


  /**
   * Reference to a field of type 'DataRequestStatus[]'
   */
  export type ListEnumDataRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestStatus[]'>
    


  /**
   * Reference to a field of type 'AdminRole'
   */
  export type EnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole'>
    


  /**
   * Reference to a field of type 'AdminRole[]'
   */
  export type ListEnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EmailSubscriberWhereInput = {
    AND?: EmailSubscriberWhereInput | EmailSubscriberWhereInput[]
    OR?: EmailSubscriberWhereInput[]
    NOT?: EmailSubscriberWhereInput | EmailSubscriberWhereInput[]
    id?: StringFilter<"EmailSubscriber"> | string
    email?: StringFilter<"EmailSubscriber"> | string
    emailHash?: StringFilter<"EmailSubscriber"> | string
    consentGiven?: BoolFilter<"EmailSubscriber"> | boolean
    consentTimestamp?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    consentIpAddress?: StringNullableFilter<"EmailSubscriber"> | string | null
    consentUserAgent?: StringNullableFilter<"EmailSubscriber"> | string | null
    consentVersion?: StringFilter<"EmailSubscriber"> | string
    isVerified?: BoolFilter<"EmailSubscriber"> | boolean
    verificationToken?: StringNullableFilter<"EmailSubscriber"> | string | null
    verificationSentAt?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    isActive?: BoolFilter<"EmailSubscriber"> | boolean
    unsubscribeToken?: StringFilter<"EmailSubscriber"> | string
    unsubscribedAt?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    source?: StringNullableFilter<"EmailSubscriber"> | string | null
    utmSource?: StringNullableFilter<"EmailSubscriber"> | string | null
    utmMedium?: StringNullableFilter<"EmailSubscriber"> | string | null
    utmCampaign?: StringNullableFilter<"EmailSubscriber"> | string | null
    createdAt?: DateTimeFilter<"EmailSubscriber"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSubscriber"> | Date | string
    auditLogs?: AuditLogListRelationFilter
    dataRequests?: DataRequestListRelationFilter
  }

  export type EmailSubscriberOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    consentGiven?: SortOrder
    consentTimestamp?: SortOrderInput | SortOrder
    consentIpAddress?: SortOrderInput | SortOrder
    consentUserAgent?: SortOrderInput | SortOrder
    consentVersion?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    verificationSentAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    utmSource?: SortOrderInput | SortOrder
    utmMedium?: SortOrderInput | SortOrder
    utmCampaign?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    auditLogs?: AuditLogOrderByRelationAggregateInput
    dataRequests?: DataRequestOrderByRelationAggregateInput
  }

  export type EmailSubscriberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    emailHash?: string
    verificationToken?: string
    unsubscribeToken?: string
    AND?: EmailSubscriberWhereInput | EmailSubscriberWhereInput[]
    OR?: EmailSubscriberWhereInput[]
    NOT?: EmailSubscriberWhereInput | EmailSubscriberWhereInput[]
    consentGiven?: BoolFilter<"EmailSubscriber"> | boolean
    consentTimestamp?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    consentIpAddress?: StringNullableFilter<"EmailSubscriber"> | string | null
    consentUserAgent?: StringNullableFilter<"EmailSubscriber"> | string | null
    consentVersion?: StringFilter<"EmailSubscriber"> | string
    isVerified?: BoolFilter<"EmailSubscriber"> | boolean
    verificationSentAt?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    isActive?: BoolFilter<"EmailSubscriber"> | boolean
    unsubscribedAt?: DateTimeNullableFilter<"EmailSubscriber"> | Date | string | null
    source?: StringNullableFilter<"EmailSubscriber"> | string | null
    utmSource?: StringNullableFilter<"EmailSubscriber"> | string | null
    utmMedium?: StringNullableFilter<"EmailSubscriber"> | string | null
    utmCampaign?: StringNullableFilter<"EmailSubscriber"> | string | null
    createdAt?: DateTimeFilter<"EmailSubscriber"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSubscriber"> | Date | string
    auditLogs?: AuditLogListRelationFilter
    dataRequests?: DataRequestListRelationFilter
  }, "id" | "email" | "emailHash" | "verificationToken" | "unsubscribeToken">

  export type EmailSubscriberOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    consentGiven?: SortOrder
    consentTimestamp?: SortOrderInput | SortOrder
    consentIpAddress?: SortOrderInput | SortOrder
    consentUserAgent?: SortOrderInput | SortOrder
    consentVersion?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    verificationSentAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    utmSource?: SortOrderInput | SortOrder
    utmMedium?: SortOrderInput | SortOrder
    utmCampaign?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailSubscriberCountOrderByAggregateInput
    _max?: EmailSubscriberMaxOrderByAggregateInput
    _min?: EmailSubscriberMinOrderByAggregateInput
  }

  export type EmailSubscriberScalarWhereWithAggregatesInput = {
    AND?: EmailSubscriberScalarWhereWithAggregatesInput | EmailSubscriberScalarWhereWithAggregatesInput[]
    OR?: EmailSubscriberScalarWhereWithAggregatesInput[]
    NOT?: EmailSubscriberScalarWhereWithAggregatesInput | EmailSubscriberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailSubscriber"> | string
    email?: StringWithAggregatesFilter<"EmailSubscriber"> | string
    emailHash?: StringWithAggregatesFilter<"EmailSubscriber"> | string
    consentGiven?: BoolWithAggregatesFilter<"EmailSubscriber"> | boolean
    consentTimestamp?: DateTimeNullableWithAggregatesFilter<"EmailSubscriber"> | Date | string | null
    consentIpAddress?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    consentUserAgent?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    consentVersion?: StringWithAggregatesFilter<"EmailSubscriber"> | string
    isVerified?: BoolWithAggregatesFilter<"EmailSubscriber"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    verificationSentAt?: DateTimeNullableWithAggregatesFilter<"EmailSubscriber"> | Date | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"EmailSubscriber"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"EmailSubscriber"> | boolean
    unsubscribeToken?: StringWithAggregatesFilter<"EmailSubscriber"> | string
    unsubscribedAt?: DateTimeNullableWithAggregatesFilter<"EmailSubscriber"> | Date | string | null
    source?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    utmSource?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    utmMedium?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    utmCampaign?: StringNullableWithAggregatesFilter<"EmailSubscriber"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailSubscriber"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailSubscriber"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    subscriberId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    description?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    requestId?: StringNullableFilter<"AuditLog"> | string | null
    legalBasis?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    subscriber?: XOR<EmailSubscriberNullableRelationFilter, EmailSubscriberWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    subscriberId?: SortOrderInput | SortOrder
    action?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    requestId?: SortOrderInput | SortOrder
    legalBasis?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    subscriber?: EmailSubscriberOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    subscriberId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    description?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    requestId?: StringNullableFilter<"AuditLog"> | string | null
    legalBasis?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    subscriber?: XOR<EmailSubscriberNullableRelationFilter, EmailSubscriberWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    subscriberId?: SortOrderInput | SortOrder
    action?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    requestId?: SortOrderInput | SortOrder
    legalBasis?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    subscriberId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    description?: StringWithAggregatesFilter<"AuditLog"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    requestId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    legalBasis?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldData?: JsonNullableWithAggregatesFilter<"AuditLog">
    newData?: JsonNullableWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type DataRequestWhereInput = {
    AND?: DataRequestWhereInput | DataRequestWhereInput[]
    OR?: DataRequestWhereInput[]
    NOT?: DataRequestWhereInput | DataRequestWhereInput[]
    id?: StringFilter<"DataRequest"> | string
    subscriberId?: StringNullableFilter<"DataRequest"> | string | null
    type?: EnumDataRequestTypeFilter<"DataRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusFilter<"DataRequest"> | $Enums.DataRequestStatus
    requestEmail?: StringFilter<"DataRequest"> | string
    processedAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    processedBy?: StringNullableFilter<"DataRequest"> | string | null
    verificationToken?: StringFilter<"DataRequest"> | string
    verificationSentAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    exportData?: JsonNullableFilter<"DataRequest">
    exportUrl?: StringNullableFilter<"DataRequest"> | string | null
    exportExpiresAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    notes?: StringNullableFilter<"DataRequest"> | string | null
    createdAt?: DateTimeFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataRequest"> | Date | string
    subscriber?: XOR<EmailSubscriberNullableRelationFilter, EmailSubscriberWhereInput> | null
  }

  export type DataRequestOrderByWithRelationInput = {
    id?: SortOrder
    subscriberId?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    requestEmail?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    processedBy?: SortOrderInput | SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    exportData?: SortOrderInput | SortOrder
    exportUrl?: SortOrderInput | SortOrder
    exportExpiresAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriber?: EmailSubscriberOrderByWithRelationInput
  }

  export type DataRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    verificationToken?: string
    AND?: DataRequestWhereInput | DataRequestWhereInput[]
    OR?: DataRequestWhereInput[]
    NOT?: DataRequestWhereInput | DataRequestWhereInput[]
    subscriberId?: StringNullableFilter<"DataRequest"> | string | null
    type?: EnumDataRequestTypeFilter<"DataRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusFilter<"DataRequest"> | $Enums.DataRequestStatus
    requestEmail?: StringFilter<"DataRequest"> | string
    processedAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    processedBy?: StringNullableFilter<"DataRequest"> | string | null
    verificationSentAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    exportData?: JsonNullableFilter<"DataRequest">
    exportUrl?: StringNullableFilter<"DataRequest"> | string | null
    exportExpiresAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    notes?: StringNullableFilter<"DataRequest"> | string | null
    createdAt?: DateTimeFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataRequest"> | Date | string
    subscriber?: XOR<EmailSubscriberNullableRelationFilter, EmailSubscriberWhereInput> | null
  }, "id" | "verificationToken">

  export type DataRequestOrderByWithAggregationInput = {
    id?: SortOrder
    subscriberId?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    requestEmail?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    processedBy?: SortOrderInput | SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    exportData?: SortOrderInput | SortOrder
    exportUrl?: SortOrderInput | SortOrder
    exportExpiresAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DataRequestCountOrderByAggregateInput
    _max?: DataRequestMaxOrderByAggregateInput
    _min?: DataRequestMinOrderByAggregateInput
  }

  export type DataRequestScalarWhereWithAggregatesInput = {
    AND?: DataRequestScalarWhereWithAggregatesInput | DataRequestScalarWhereWithAggregatesInput[]
    OR?: DataRequestScalarWhereWithAggregatesInput[]
    NOT?: DataRequestScalarWhereWithAggregatesInput | DataRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DataRequest"> | string
    subscriberId?: StringNullableWithAggregatesFilter<"DataRequest"> | string | null
    type?: EnumDataRequestTypeWithAggregatesFilter<"DataRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusWithAggregatesFilter<"DataRequest"> | $Enums.DataRequestStatus
    requestEmail?: StringWithAggregatesFilter<"DataRequest"> | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"DataRequest"> | Date | string | null
    processedBy?: StringNullableWithAggregatesFilter<"DataRequest"> | string | null
    verificationToken?: StringWithAggregatesFilter<"DataRequest"> | string
    verificationSentAt?: DateTimeNullableWithAggregatesFilter<"DataRequest"> | Date | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"DataRequest"> | Date | string | null
    exportData?: JsonNullableWithAggregatesFilter<"DataRequest">
    exportUrl?: StringNullableWithAggregatesFilter<"DataRequest"> | string | null
    exportExpiresAt?: DateTimeNullableWithAggregatesFilter<"DataRequest"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"DataRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DataRequest"> | Date | string
  }

  export type ConsentRecordWhereInput = {
    AND?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    OR?: ConsentRecordWhereInput[]
    NOT?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    id?: StringFilter<"ConsentRecord"> | string
    email?: StringFilter<"ConsentRecord"> | string
    consentType?: StringFilter<"ConsentRecord"> | string
    consentGiven?: BoolFilter<"ConsentRecord"> | boolean
    consentVersion?: StringFilter<"ConsentRecord"> | string
    legalBasis?: StringFilter<"ConsentRecord"> | string
    purpose?: StringFilter<"ConsentRecord"> | string
    ipAddress?: StringNullableFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableFilter<"ConsentRecord"> | string | null
    source?: StringNullableFilter<"ConsentRecord"> | string | null
    timestamp?: DateTimeFilter<"ConsentRecord"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
  }

  export type ConsentRecordOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    consentType?: SortOrder
    consentGiven?: SortOrder
    consentVersion?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
  }

  export type ConsentRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    OR?: ConsentRecordWhereInput[]
    NOT?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    email?: StringFilter<"ConsentRecord"> | string
    consentType?: StringFilter<"ConsentRecord"> | string
    consentGiven?: BoolFilter<"ConsentRecord"> | boolean
    consentVersion?: StringFilter<"ConsentRecord"> | string
    legalBasis?: StringFilter<"ConsentRecord"> | string
    purpose?: StringFilter<"ConsentRecord"> | string
    ipAddress?: StringNullableFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableFilter<"ConsentRecord"> | string | null
    source?: StringNullableFilter<"ConsentRecord"> | string | null
    timestamp?: DateTimeFilter<"ConsentRecord"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
  }, "id">

  export type ConsentRecordOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    consentType?: SortOrder
    consentGiven?: SortOrder
    consentVersion?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: ConsentRecordCountOrderByAggregateInput
    _max?: ConsentRecordMaxOrderByAggregateInput
    _min?: ConsentRecordMinOrderByAggregateInput
  }

  export type ConsentRecordScalarWhereWithAggregatesInput = {
    AND?: ConsentRecordScalarWhereWithAggregatesInput | ConsentRecordScalarWhereWithAggregatesInput[]
    OR?: ConsentRecordScalarWhereWithAggregatesInput[]
    NOT?: ConsentRecordScalarWhereWithAggregatesInput | ConsentRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConsentRecord"> | string
    email?: StringWithAggregatesFilter<"ConsentRecord"> | string
    consentType?: StringWithAggregatesFilter<"ConsentRecord"> | string
    consentGiven?: BoolWithAggregatesFilter<"ConsentRecord"> | boolean
    consentVersion?: StringWithAggregatesFilter<"ConsentRecord"> | string
    legalBasis?: StringWithAggregatesFilter<"ConsentRecord"> | string
    purpose?: StringWithAggregatesFilter<"ConsentRecord"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    source?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"ConsentRecord"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ConsentRecord"> | Date | string | null
  }

  export type AdminUserWhereInput = {
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    id?: StringFilter<"AdminUser"> | string
    email?: StringFilter<"AdminUser"> | string
    passwordHash?: StringFilter<"AdminUser"> | string
    role?: EnumAdminRoleFilter<"AdminUser"> | $Enums.AdminRole
    isActive?: BoolFilter<"AdminUser"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"AdminUser"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"AdminUser"> | string | null
    failedLoginAttempts?: IntFilter<"AdminUser"> | number
    lockedUntil?: DateTimeNullableFilter<"AdminUser"> | Date | string | null
    twoFactorSecret?: StringNullableFilter<"AdminUser"> | string | null
    twoFactorEnabled?: BoolFilter<"AdminUser"> | boolean
    createdAt?: DateTimeFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeFilter<"AdminUser"> | Date | string
  }

  export type AdminUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastLoginIp?: SortOrderInput | SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    passwordHash?: StringFilter<"AdminUser"> | string
    role?: EnumAdminRoleFilter<"AdminUser"> | $Enums.AdminRole
    isActive?: BoolFilter<"AdminUser"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"AdminUser"> | Date | string | null
    lastLoginIp?: StringNullableFilter<"AdminUser"> | string | null
    failedLoginAttempts?: IntFilter<"AdminUser"> | number
    lockedUntil?: DateTimeNullableFilter<"AdminUser"> | Date | string | null
    twoFactorSecret?: StringNullableFilter<"AdminUser"> | string | null
    twoFactorEnabled?: BoolFilter<"AdminUser"> | boolean
    createdAt?: DateTimeFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeFilter<"AdminUser"> | Date | string
  }, "id" | "email">

  export type AdminUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastLoginIp?: SortOrderInput | SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminUserCountOrderByAggregateInput
    _avg?: AdminUserAvgOrderByAggregateInput
    _max?: AdminUserMaxOrderByAggregateInput
    _min?: AdminUserMinOrderByAggregateInput
    _sum?: AdminUserSumOrderByAggregateInput
  }

  export type AdminUserScalarWhereWithAggregatesInput = {
    AND?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    OR?: AdminUserScalarWhereWithAggregatesInput[]
    NOT?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminUser"> | string
    email?: StringWithAggregatesFilter<"AdminUser"> | string
    passwordHash?: StringWithAggregatesFilter<"AdminUser"> | string
    role?: EnumAdminRoleWithAggregatesFilter<"AdminUser"> | $Enums.AdminRole
    isActive?: BoolWithAggregatesFilter<"AdminUser"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"AdminUser"> | Date | string | null
    lastLoginIp?: StringNullableWithAggregatesFilter<"AdminUser"> | string | null
    failedLoginAttempts?: IntWithAggregatesFilter<"AdminUser"> | number
    lockedUntil?: DateTimeNullableWithAggregatesFilter<"AdminUser"> | Date | string | null
    twoFactorSecret?: StringNullableWithAggregatesFilter<"AdminUser"> | string | null
    twoFactorEnabled?: BoolWithAggregatesFilter<"AdminUser"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AdminUser"> | Date | string
  }

  export type EmailSubscriberCreateInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutSubscriberInput
    dataRequests?: DataRequestCreateNestedManyWithoutSubscriberInput
  }

  export type EmailSubscriberUncheckedCreateInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutSubscriberInput
    dataRequests?: DataRequestUncheckedCreateNestedManyWithoutSubscriberInput
  }

  export type EmailSubscriberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutSubscriberNestedInput
    dataRequests?: DataRequestUpdateManyWithoutSubscriberNestedInput
  }

  export type EmailSubscriberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutSubscriberNestedInput
    dataRequests?: DataRequestUncheckedUpdateManyWithoutSubscriberNestedInput
  }

  export type EmailSubscriberCreateManyInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailSubscriberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailSubscriberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    legalBasis?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    subscriber?: EmailSubscriberCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    subscriberId?: string | null
    action: string
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    legalBasis?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriber?: EmailSubscriberUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    subscriberId?: string | null
    action: string
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    legalBasis?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestCreateInput = {
    id?: string
    type: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestEmail: string
    processedAt?: Date | string | null
    processedBy?: string | null
    verificationToken?: string
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: string | null
    exportExpiresAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriber?: EmailSubscriberCreateNestedOneWithoutDataRequestsInput
  }

  export type DataRequestUncheckedCreateInput = {
    id?: string
    subscriberId?: string | null
    type: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestEmail: string
    processedAt?: Date | string | null
    processedBy?: string | null
    verificationToken?: string
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: string | null
    exportExpiresAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriber?: EmailSubscriberUpdateOneWithoutDataRequestsNestedInput
  }

  export type DataRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestCreateManyInput = {
    id?: string
    subscriberId?: string | null
    type: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestEmail: string
    processedAt?: Date | string | null
    processedBy?: string | null
    verificationToken?: string
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: string | null
    exportExpiresAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordCreateInput = {
    id?: string
    email: string
    consentType: string
    consentGiven: boolean
    consentVersion: string
    legalBasis: string
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    source?: string | null
    timestamp?: Date | string
    expiresAt?: Date | string | null
  }

  export type ConsentRecordUncheckedCreateInput = {
    id?: string
    email: string
    consentType: string
    consentGiven: boolean
    consentVersion: string
    legalBasis: string
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    source?: string | null
    timestamp?: Date | string
    expiresAt?: Date | string | null
  }

  export type ConsentRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consentType?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentVersion?: StringFieldUpdateOperationsInput | string
    legalBasis?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsentRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consentType?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentVersion?: StringFieldUpdateOperationsInput | string
    legalBasis?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsentRecordCreateManyInput = {
    id?: string
    email: string
    consentType: string
    consentGiven: boolean
    consentVersion: string
    legalBasis: string
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    source?: string | null
    timestamp?: Date | string
    expiresAt?: Date | string | null
  }

  export type ConsentRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consentType?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentVersion?: StringFieldUpdateOperationsInput | string
    legalBasis?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsentRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    consentType?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentVersion?: StringFieldUpdateOperationsInput | string
    legalBasis?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminUserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    failedLoginAttempts?: number
    lockedUntil?: Date | string | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    failedLoginAttempts?: number
    lockedUntil?: Date | string | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    lastLoginIp?: string | null
    failedLoginAttempts?: number
    lockedUntil?: Date | string | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginIp?: NullableStringFieldUpdateOperationsInput | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type DataRequestListRelationFilter = {
    every?: DataRequestWhereInput
    some?: DataRequestWhereInput
    none?: DataRequestWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DataRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailSubscriberCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    consentGiven?: SortOrder
    consentTimestamp?: SortOrder
    consentIpAddress?: SortOrder
    consentUserAgent?: SortOrder
    consentVersion?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrder
    verifiedAt?: SortOrder
    isActive?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrder
    source?: SortOrder
    utmSource?: SortOrder
    utmMedium?: SortOrder
    utmCampaign?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSubscriberMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    consentGiven?: SortOrder
    consentTimestamp?: SortOrder
    consentIpAddress?: SortOrder
    consentUserAgent?: SortOrder
    consentVersion?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrder
    verifiedAt?: SortOrder
    isActive?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrder
    source?: SortOrder
    utmSource?: SortOrder
    utmMedium?: SortOrder
    utmCampaign?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSubscriberMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    consentGiven?: SortOrder
    consentTimestamp?: SortOrder
    consentIpAddress?: SortOrder
    consentUserAgent?: SortOrder
    consentVersion?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrder
    verifiedAt?: SortOrder
    isActive?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrder
    source?: SortOrder
    utmSource?: SortOrder
    utmMedium?: SortOrder
    utmCampaign?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EmailSubscriberNullableRelationFilter = {
    is?: EmailSubscriberWhereInput | null
    isNot?: EmailSubscriberWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestId?: SortOrder
    legalBasis?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestId?: SortOrder
    legalBasis?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestId?: SortOrder
    legalBasis?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumDataRequestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeFilter<$PrismaModel> | $Enums.DataRequestType
  }

  export type EnumDataRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusFilter<$PrismaModel> | $Enums.DataRequestStatus
  }

  export type DataRequestCountOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    requestEmail?: SortOrder
    processedAt?: SortOrder
    processedBy?: SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrder
    verifiedAt?: SortOrder
    exportData?: SortOrder
    exportUrl?: SortOrder
    exportExpiresAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    requestEmail?: SortOrder
    processedAt?: SortOrder
    processedBy?: SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrder
    verifiedAt?: SortOrder
    exportUrl?: SortOrder
    exportExpiresAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRequestMinOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    requestEmail?: SortOrder
    processedAt?: SortOrder
    processedBy?: SortOrder
    verificationToken?: SortOrder
    verificationSentAt?: SortOrder
    verifiedAt?: SortOrder
    exportUrl?: SortOrder
    exportExpiresAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDataRequestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestTypeFilter<$PrismaModel>
    _max?: NestedEnumDataRequestTypeFilter<$PrismaModel>
  }

  export type EnumDataRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumDataRequestStatusFilter<$PrismaModel>
  }

  export type ConsentRecordCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    consentType?: SortOrder
    consentGiven?: SortOrder
    consentVersion?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    expiresAt?: SortOrder
  }

  export type ConsentRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    consentType?: SortOrder
    consentGiven?: SortOrder
    consentVersion?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    expiresAt?: SortOrder
  }

  export type ConsentRecordMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    consentType?: SortOrder
    consentGiven?: SortOrder
    consentVersion?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    expiresAt?: SortOrder
  }

  export type EnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AdminUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginIp?: SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserAvgOrderByAggregateInput = {
    failedLoginAttempts?: SortOrder
  }

  export type AdminUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginIp?: SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginIp?: SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserSumOrderByAggregateInput = {
    failedLoginAttempts?: SortOrder
  }

  export type EnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AuditLogCreateNestedManyWithoutSubscriberInput = {
    create?: XOR<AuditLogCreateWithoutSubscriberInput, AuditLogUncheckedCreateWithoutSubscriberInput> | AuditLogCreateWithoutSubscriberInput[] | AuditLogUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutSubscriberInput | AuditLogCreateOrConnectWithoutSubscriberInput[]
    createMany?: AuditLogCreateManySubscriberInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DataRequestCreateNestedManyWithoutSubscriberInput = {
    create?: XOR<DataRequestCreateWithoutSubscriberInput, DataRequestUncheckedCreateWithoutSubscriberInput> | DataRequestCreateWithoutSubscriberInput[] | DataRequestUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutSubscriberInput | DataRequestCreateOrConnectWithoutSubscriberInput[]
    createMany?: DataRequestCreateManySubscriberInputEnvelope
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutSubscriberInput = {
    create?: XOR<AuditLogCreateWithoutSubscriberInput, AuditLogUncheckedCreateWithoutSubscriberInput> | AuditLogCreateWithoutSubscriberInput[] | AuditLogUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutSubscriberInput | AuditLogCreateOrConnectWithoutSubscriberInput[]
    createMany?: AuditLogCreateManySubscriberInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DataRequestUncheckedCreateNestedManyWithoutSubscriberInput = {
    create?: XOR<DataRequestCreateWithoutSubscriberInput, DataRequestUncheckedCreateWithoutSubscriberInput> | DataRequestCreateWithoutSubscriberInput[] | DataRequestUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutSubscriberInput | DataRequestCreateOrConnectWithoutSubscriberInput[]
    createMany?: DataRequestCreateManySubscriberInputEnvelope
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AuditLogUpdateManyWithoutSubscriberNestedInput = {
    create?: XOR<AuditLogCreateWithoutSubscriberInput, AuditLogUncheckedCreateWithoutSubscriberInput> | AuditLogCreateWithoutSubscriberInput[] | AuditLogUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutSubscriberInput | AuditLogCreateOrConnectWithoutSubscriberInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutSubscriberInput | AuditLogUpsertWithWhereUniqueWithoutSubscriberInput[]
    createMany?: AuditLogCreateManySubscriberInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutSubscriberInput | AuditLogUpdateWithWhereUniqueWithoutSubscriberInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutSubscriberInput | AuditLogUpdateManyWithWhereWithoutSubscriberInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DataRequestUpdateManyWithoutSubscriberNestedInput = {
    create?: XOR<DataRequestCreateWithoutSubscriberInput, DataRequestUncheckedCreateWithoutSubscriberInput> | DataRequestCreateWithoutSubscriberInput[] | DataRequestUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutSubscriberInput | DataRequestCreateOrConnectWithoutSubscriberInput[]
    upsert?: DataRequestUpsertWithWhereUniqueWithoutSubscriberInput | DataRequestUpsertWithWhereUniqueWithoutSubscriberInput[]
    createMany?: DataRequestCreateManySubscriberInputEnvelope
    set?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    disconnect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    delete?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    update?: DataRequestUpdateWithWhereUniqueWithoutSubscriberInput | DataRequestUpdateWithWhereUniqueWithoutSubscriberInput[]
    updateMany?: DataRequestUpdateManyWithWhereWithoutSubscriberInput | DataRequestUpdateManyWithWhereWithoutSubscriberInput[]
    deleteMany?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutSubscriberNestedInput = {
    create?: XOR<AuditLogCreateWithoutSubscriberInput, AuditLogUncheckedCreateWithoutSubscriberInput> | AuditLogCreateWithoutSubscriberInput[] | AuditLogUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutSubscriberInput | AuditLogCreateOrConnectWithoutSubscriberInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutSubscriberInput | AuditLogUpsertWithWhereUniqueWithoutSubscriberInput[]
    createMany?: AuditLogCreateManySubscriberInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutSubscriberInput | AuditLogUpdateWithWhereUniqueWithoutSubscriberInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutSubscriberInput | AuditLogUpdateManyWithWhereWithoutSubscriberInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DataRequestUncheckedUpdateManyWithoutSubscriberNestedInput = {
    create?: XOR<DataRequestCreateWithoutSubscriberInput, DataRequestUncheckedCreateWithoutSubscriberInput> | DataRequestCreateWithoutSubscriberInput[] | DataRequestUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutSubscriberInput | DataRequestCreateOrConnectWithoutSubscriberInput[]
    upsert?: DataRequestUpsertWithWhereUniqueWithoutSubscriberInput | DataRequestUpsertWithWhereUniqueWithoutSubscriberInput[]
    createMany?: DataRequestCreateManySubscriberInputEnvelope
    set?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    disconnect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    delete?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    update?: DataRequestUpdateWithWhereUniqueWithoutSubscriberInput | DataRequestUpdateWithWhereUniqueWithoutSubscriberInput[]
    updateMany?: DataRequestUpdateManyWithWhereWithoutSubscriberInput | DataRequestUpdateManyWithWhereWithoutSubscriberInput[]
    deleteMany?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
  }

  export type EmailSubscriberCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<EmailSubscriberCreateWithoutAuditLogsInput, EmailSubscriberUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: EmailSubscriberCreateOrConnectWithoutAuditLogsInput
    connect?: EmailSubscriberWhereUniqueInput
  }

  export type EmailSubscriberUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<EmailSubscriberCreateWithoutAuditLogsInput, EmailSubscriberUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: EmailSubscriberCreateOrConnectWithoutAuditLogsInput
    upsert?: EmailSubscriberUpsertWithoutAuditLogsInput
    disconnect?: EmailSubscriberWhereInput | boolean
    delete?: EmailSubscriberWhereInput | boolean
    connect?: EmailSubscriberWhereUniqueInput
    update?: XOR<XOR<EmailSubscriberUpdateToOneWithWhereWithoutAuditLogsInput, EmailSubscriberUpdateWithoutAuditLogsInput>, EmailSubscriberUncheckedUpdateWithoutAuditLogsInput>
  }

  export type EmailSubscriberCreateNestedOneWithoutDataRequestsInput = {
    create?: XOR<EmailSubscriberCreateWithoutDataRequestsInput, EmailSubscriberUncheckedCreateWithoutDataRequestsInput>
    connectOrCreate?: EmailSubscriberCreateOrConnectWithoutDataRequestsInput
    connect?: EmailSubscriberWhereUniqueInput
  }

  export type EnumDataRequestTypeFieldUpdateOperationsInput = {
    set?: $Enums.DataRequestType
  }

  export type EnumDataRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.DataRequestStatus
  }

  export type EmailSubscriberUpdateOneWithoutDataRequestsNestedInput = {
    create?: XOR<EmailSubscriberCreateWithoutDataRequestsInput, EmailSubscriberUncheckedCreateWithoutDataRequestsInput>
    connectOrCreate?: EmailSubscriberCreateOrConnectWithoutDataRequestsInput
    upsert?: EmailSubscriberUpsertWithoutDataRequestsInput
    disconnect?: EmailSubscriberWhereInput | boolean
    delete?: EmailSubscriberWhereInput | boolean
    connect?: EmailSubscriberWhereUniqueInput
    update?: XOR<XOR<EmailSubscriberUpdateToOneWithWhereWithoutDataRequestsInput, EmailSubscriberUpdateWithoutDataRequestsInput>, EmailSubscriberUncheckedUpdateWithoutDataRequestsInput>
  }

  export type EnumAdminRoleFieldUpdateOperationsInput = {
    set?: $Enums.AdminRole
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumDataRequestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeFilter<$PrismaModel> | $Enums.DataRequestType
  }

  export type NestedEnumDataRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusFilter<$PrismaModel> | $Enums.DataRequestStatus
  }

  export type NestedEnumDataRequestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestTypeFilter<$PrismaModel>
    _max?: NestedEnumDataRequestTypeFilter<$PrismaModel>
  }

  export type NestedEnumDataRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumDataRequestStatusFilter<$PrismaModel>
  }

  export type NestedEnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type AuditLogCreateWithoutSubscriberInput = {
    id?: string
    action: string
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    legalBasis?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutSubscriberInput = {
    id?: string
    action: string
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    legalBasis?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutSubscriberInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutSubscriberInput, AuditLogUncheckedCreateWithoutSubscriberInput>
  }

  export type AuditLogCreateManySubscriberInputEnvelope = {
    data: AuditLogCreateManySubscriberInput | AuditLogCreateManySubscriberInput[]
    skipDuplicates?: boolean
  }

  export type DataRequestCreateWithoutSubscriberInput = {
    id?: string
    type: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestEmail: string
    processedAt?: Date | string | null
    processedBy?: string | null
    verificationToken?: string
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: string | null
    exportExpiresAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRequestUncheckedCreateWithoutSubscriberInput = {
    id?: string
    type: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestEmail: string
    processedAt?: Date | string | null
    processedBy?: string | null
    verificationToken?: string
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: string | null
    exportExpiresAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRequestCreateOrConnectWithoutSubscriberInput = {
    where: DataRequestWhereUniqueInput
    create: XOR<DataRequestCreateWithoutSubscriberInput, DataRequestUncheckedCreateWithoutSubscriberInput>
  }

  export type DataRequestCreateManySubscriberInputEnvelope = {
    data: DataRequestCreateManySubscriberInput | DataRequestCreateManySubscriberInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogUpsertWithWhereUniqueWithoutSubscriberInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutSubscriberInput, AuditLogUncheckedUpdateWithoutSubscriberInput>
    create: XOR<AuditLogCreateWithoutSubscriberInput, AuditLogUncheckedCreateWithoutSubscriberInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutSubscriberInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutSubscriberInput, AuditLogUncheckedUpdateWithoutSubscriberInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutSubscriberInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutSubscriberInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    subscriberId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    description?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    requestId?: StringNullableFilter<"AuditLog"> | string | null
    legalBasis?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type DataRequestUpsertWithWhereUniqueWithoutSubscriberInput = {
    where: DataRequestWhereUniqueInput
    update: XOR<DataRequestUpdateWithoutSubscriberInput, DataRequestUncheckedUpdateWithoutSubscriberInput>
    create: XOR<DataRequestCreateWithoutSubscriberInput, DataRequestUncheckedCreateWithoutSubscriberInput>
  }

  export type DataRequestUpdateWithWhereUniqueWithoutSubscriberInput = {
    where: DataRequestWhereUniqueInput
    data: XOR<DataRequestUpdateWithoutSubscriberInput, DataRequestUncheckedUpdateWithoutSubscriberInput>
  }

  export type DataRequestUpdateManyWithWhereWithoutSubscriberInput = {
    where: DataRequestScalarWhereInput
    data: XOR<DataRequestUpdateManyMutationInput, DataRequestUncheckedUpdateManyWithoutSubscriberInput>
  }

  export type DataRequestScalarWhereInput = {
    AND?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
    OR?: DataRequestScalarWhereInput[]
    NOT?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
    id?: StringFilter<"DataRequest"> | string
    subscriberId?: StringNullableFilter<"DataRequest"> | string | null
    type?: EnumDataRequestTypeFilter<"DataRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusFilter<"DataRequest"> | $Enums.DataRequestStatus
    requestEmail?: StringFilter<"DataRequest"> | string
    processedAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    processedBy?: StringNullableFilter<"DataRequest"> | string | null
    verificationToken?: StringFilter<"DataRequest"> | string
    verificationSentAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    exportData?: JsonNullableFilter<"DataRequest">
    exportUrl?: StringNullableFilter<"DataRequest"> | string | null
    exportExpiresAt?: DateTimeNullableFilter<"DataRequest"> | Date | string | null
    notes?: StringNullableFilter<"DataRequest"> | string | null
    createdAt?: DateTimeFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataRequest"> | Date | string
  }

  export type EmailSubscriberCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataRequests?: DataRequestCreateNestedManyWithoutSubscriberInput
  }

  export type EmailSubscriberUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataRequests?: DataRequestUncheckedCreateNestedManyWithoutSubscriberInput
  }

  export type EmailSubscriberCreateOrConnectWithoutAuditLogsInput = {
    where: EmailSubscriberWhereUniqueInput
    create: XOR<EmailSubscriberCreateWithoutAuditLogsInput, EmailSubscriberUncheckedCreateWithoutAuditLogsInput>
  }

  export type EmailSubscriberUpsertWithoutAuditLogsInput = {
    update: XOR<EmailSubscriberUpdateWithoutAuditLogsInput, EmailSubscriberUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<EmailSubscriberCreateWithoutAuditLogsInput, EmailSubscriberUncheckedCreateWithoutAuditLogsInput>
    where?: EmailSubscriberWhereInput
  }

  export type EmailSubscriberUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: EmailSubscriberWhereInput
    data: XOR<EmailSubscriberUpdateWithoutAuditLogsInput, EmailSubscriberUncheckedUpdateWithoutAuditLogsInput>
  }

  export type EmailSubscriberUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRequests?: DataRequestUpdateManyWithoutSubscriberNestedInput
  }

  export type EmailSubscriberUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRequests?: DataRequestUncheckedUpdateManyWithoutSubscriberNestedInput
  }

  export type EmailSubscriberCreateWithoutDataRequestsInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutSubscriberInput
  }

  export type EmailSubscriberUncheckedCreateWithoutDataRequestsInput = {
    id?: string
    email: string
    emailHash: string
    consentGiven?: boolean
    consentTimestamp?: Date | string | null
    consentIpAddress?: string | null
    consentUserAgent?: string | null
    consentVersion?: string
    isVerified?: boolean
    verificationToken?: string | null
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    isActive?: boolean
    unsubscribeToken?: string
    unsubscribedAt?: Date | string | null
    source?: string | null
    utmSource?: string | null
    utmMedium?: string | null
    utmCampaign?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutSubscriberInput
  }

  export type EmailSubscriberCreateOrConnectWithoutDataRequestsInput = {
    where: EmailSubscriberWhereUniqueInput
    create: XOR<EmailSubscriberCreateWithoutDataRequestsInput, EmailSubscriberUncheckedCreateWithoutDataRequestsInput>
  }

  export type EmailSubscriberUpsertWithoutDataRequestsInput = {
    update: XOR<EmailSubscriberUpdateWithoutDataRequestsInput, EmailSubscriberUncheckedUpdateWithoutDataRequestsInput>
    create: XOR<EmailSubscriberCreateWithoutDataRequestsInput, EmailSubscriberUncheckedCreateWithoutDataRequestsInput>
    where?: EmailSubscriberWhereInput
  }

  export type EmailSubscriberUpdateToOneWithWhereWithoutDataRequestsInput = {
    where?: EmailSubscriberWhereInput
    data: XOR<EmailSubscriberUpdateWithoutDataRequestsInput, EmailSubscriberUncheckedUpdateWithoutDataRequestsInput>
  }

  export type EmailSubscriberUpdateWithoutDataRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutSubscriberNestedInput
  }

  export type EmailSubscriberUncheckedUpdateWithoutDataRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentIpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    consentUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentVersion?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: StringFieldUpdateOperationsInput | string
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    utmSource?: NullableStringFieldUpdateOperationsInput | string | null
    utmMedium?: NullableStringFieldUpdateOperationsInput | string | null
    utmCampaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutSubscriberNestedInput
  }

  export type AuditLogCreateManySubscriberInput = {
    id?: string
    action: string
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    legalBasis?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type DataRequestCreateManySubscriberInput = {
    id?: string
    type: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestEmail: string
    processedAt?: Date | string | null
    processedBy?: string | null
    verificationToken?: string
    verificationSentAt?: Date | string | null
    verifiedAt?: Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: string | null
    exportExpiresAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogUpdateWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUpdateWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUncheckedUpdateWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUncheckedUpdateManyWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestEmail?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verificationToken?: StringFieldUpdateOperationsInput | string
    verificationSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exportData?: NullableJsonNullValueInput | InputJsonValue
    exportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    exportExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EmailSubscriberCountOutputTypeDefaultArgs instead
     */
    export type EmailSubscriberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailSubscriberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailSubscriberDefaultArgs instead
     */
    export type EmailSubscriberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailSubscriberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DataRequestDefaultArgs instead
     */
    export type DataRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DataRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsentRecordDefaultArgs instead
     */
    export type ConsentRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsentRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminUserDefaultArgs instead
     */
    export type AdminUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminUserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}